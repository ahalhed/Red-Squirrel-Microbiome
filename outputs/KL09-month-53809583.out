Unloading StdEnv/2020

The following have been reloaded with a version change:
  1) gcccore/.9.3.0 => gcccore/.7.3.0     2) imkl/2020.1.217 => imkl/2018.3.222

[1] "Set up (working directory, theme, and packages)"
Loading required package: permute
Loading required package: lattice
This is vegan 2.5-6
Loading required package: MASS
Loading required package: NADA
Loading required package: survival

Attaching package: ‘NADA’

The following object is masked from ‘package:stats’:

    cor

Loading required package: truncnorm
Loading required package: ALDEx2
Loading required package: car
Loading required package: carData
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.1     ✔ dplyr   1.0.0
✔ tidyr   1.1.0     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
✖ dplyr::recode() masks car::recode()
✖ dplyr::select() masks MASS::select()
✖ purrr::some()   masks car::some()
[1] "Initiate functions for analysis"
[1] "Read in the Data"
[1] "Building phyloseq object"
[1] "Read in the metadata"
[1] "Aitchison transformation"
No. corrected values:  19086552 
[1] "Extract Core"
[1] "Subset the OTU table to find core and non-core OTUs"
[1] "Accessing the XY data by month"
[1] "Months in this Grid"
[1] 4 3 5 7 6 8
[1] "Computing Euclidean Distances"
[1] "Maximum Euclidean Distance by Month"
$`Month 3`
[1] 21.47673

$`Month 4`
[1] 23.08679

$`Month 5`
[1] 21.36001

$`Month 6`
[1] 21.47673

$`Month 7`
[1] 23.85372

$`Month 8`
[1] 24.59675

Warning message:
`summarise_each_()` is deprecated as of dplyr 0.7.0.
Please use `across()` instead.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
[1] "Build the community object (OTU table) for grid/year/month"
[1] "Extract metadata for grid/year/month"
[1] "Removing pobjects that are no longer needed"
[1] "Unweighted PCNM - for use with all OTU tables"
                              PCNM1       PCNM2       PCNM3        PCNM4
A0174.10342.F.2.KL.2009 -0.14696657 -0.10076199 -0.07103571 -0.053912894
A0910.10181.F.4.KL.2009 -0.15177359 -0.09586635 -0.06549778 -0.060739346
A0970.11176.F.1.KL.2009 -0.15177359 -0.09586635 -0.06549778 -0.060739346
A0579.11176.F.1.KL.2009 -0.15177359 -0.09586635 -0.06549778 -0.060739346
A0094.10517.F.2.KL.2009 -0.22386137  0.17063076  0.28753214 -0.016919810
A0014.11176.F.1.KL.2009 -0.15101039 -0.09807278 -0.06732452 -0.057813241
A0106.10408.F.2.KL.2009  0.09575580 -0.34890973 -0.41480817  0.433830920
A0245.8815.F.3.KL.2009  -0.08839041  0.08116391 -0.23844211 -0.279604044
A0201.10131.F.4.KL.2009 -0.21847628  0.17353660  0.29383218 -0.001695139
A0045.10265.F.4.KL.2009 -0.22131614  0.17060713  0.28409348 -0.031677473
A0007.10754.F.1.KL.2009  0.32563840  0.48932357 -0.18357877  0.187353448
A0227.10182.F.4.KL.2009  0.30690948  0.51629911 -0.32193951 -0.177917984
A0034.10375.F.2.KL.2009 -0.20427738  0.05118117  0.04248857  0.531331999
A0787.11176.F.1.KL.2009 -0.15177359 -0.09586635 -0.06549778 -0.060739346
A0308.11171.F.1.KL.2009  0.43670737 -0.10103372  0.51422187 -0.187750954
A0119.10183.F.4.KL.2009  0.23751813 -0.39818743 -0.13359639 -0.452234770
A0260.10137.F.4.KL.2009  0.45886371 -0.22231118  0.27054804  0.349967324
                              PCNM5         PCNM6         PCNM7         PCNM8
A0174.10342.F.2.KL.2009  0.13554381  0.5582122456 -0.1491635591  0.4854916358
A0910.10181.F.4.KL.2009  0.11473071 -0.1730480736  0.0318770436 -0.1403579425
A0970.11176.F.1.KL.2009  0.11473071 -0.1730480736  0.0318770436 -0.1403579425
A0579.11176.F.1.KL.2009  0.11473071 -0.1730480736  0.0318770436 -0.1403579425
A0094.10517.F.2.KL.2009 -0.01932752  0.1002579381 -0.0411419507  0.4432185238
A0014.11176.F.1.KL.2009  0.12249504  0.1350112996  0.0088238643  0.0592566297
A0106.10408.F.2.KL.2009 -0.10387579 -0.0125344019  0.0019037508 -0.0026566440
A0245.8815.F.3.KL.2009  -0.52980762  0.0002544761  0.0002116894 -0.0001273663
A0201.10131.F.4.KL.2009 -0.02311182  0.3249325636  0.6490871004 -0.3643912324
A0045.10265.F.4.KL.2009 -0.02820139 -0.5895756706 -0.1829464622  0.2436073421
A0007.10754.F.1.KL.2009  0.61669977 -0.0223473026  0.0041167302 -0.0023539926
A0227.10182.F.4.KL.2009 -0.36331572  0.0222688668 -0.0034606827  0.0012483306
A0034.10375.F.2.KL.2009 -0.18763263  0.1693034765 -0.4153943200 -0.3018958451
A0787.11176.F.1.KL.2009  0.11473071 -0.1730480736  0.0318770436 -0.1403579425
A0308.11171.F.1.KL.2009 -0.03439538  0.1662166050 -0.4236152546 -0.3167818530
A0119.10183.F.4.KL.2009  0.16655997  0.0121363738  0.0181557732 -0.0024095792
A0260.10137.F.4.KL.2009 -0.21055356 -0.1719441754  0.4059151467  0.3192258208
                              PCNM1       PCNM2       PCNM3       PCNM4
A0439.11177.F.1.KL.2009 -0.16844796 -0.19502592  0.15281636 -0.20687202
A0021.10265.F.4.KL.2009 -0.25531876  0.07980803  0.05413607  0.20029813
A0680.11176.F.1.KL.2009 -0.15191079 -0.10134127 -0.08158452 -0.20335426
A0455.10137.F.4.KL.2009  0.31035910 -0.02059411 -0.08340818  0.28533493
A0671.11489.F.2.KL.2009 -0.22020051  0.10830396  0.56565764 -0.23470547
A0711.10517.F.2.KL.2009 -0.25597996  0.07112727  0.06407647  0.19382234
A0460.10342.F.2.KL.2009 -0.12680010 -0.23124594  0.10562178 -0.23789812
A0382.10137.F.4.KL.2009  0.33735767  0.15828567  0.17997442  0.09847067
A0317.10342.F.2.KL.2009 -0.08205478 -0.23803480  0.06082424 -0.03097923
A0411.10145.F.4.KL.2009  0.01958382  0.45829643 -0.28560150 -0.53670144
A0423.10342.F.2.KL.2009  0.04865356 -0.18416670 -0.04200800  0.26726931
A0427.10318.F.3.KL.2009 -0.04808451 -0.26785140 -0.20667698  0.12810404
A0744.10462.F.1.KL.2009 -0.07363150 -0.13737055 -0.39782743  0.16588625
A0402.10391.F.2.KL.2009  0.30213093  0.27887081  0.27250679  0.11784738
A0454.10265.F.4.KL.2009 -0.25531876  0.07980803  0.05413607  0.20029813
A0694.10184.F.3.KL.2009  0.26923895 -0.11510489 -0.07696977 -0.03448454
A0644.10317.F.3.KL.2009  0.33355733  0.15688728  0.17660774  0.09351199
A0704.10140.F.4.KL.2009 -0.15985722  0.47713037 -0.40278932  0.03864138
A0354.10748.F.2.KL.2009  0.19397967 -0.26241240 -0.15294514 -0.29298149
A0498.10183.F.4.KL.2009  0.23872377 -0.18649715 -0.02062322 -0.20533032
A0365.10517.F.2.KL.2009 -0.25597996  0.07112727  0.06407647  0.19382234
                               PCNM5        PCNM6         PCNM7        PCNM8
A0439.11177.F.1.KL.2009 -0.237368693  0.145693517  0.5263434703 -0.084392711
A0021.10265.F.4.KL.2009 -0.038003029 -0.007114357 -0.0032908579  0.040836665
A0680.11176.F.1.KL.2009  0.064005821 -0.462233836 -0.0809313485 -0.208005209
A0455.10137.F.4.KL.2009  0.184888794  0.455942793 -0.0777821221 -0.266502190
A0671.11489.F.2.KL.2009  0.119769605  0.102152447 -0.2184542536 -0.255698122
A0711.10517.F.2.KL.2009 -0.036715000  0.007687546  0.0006366415  0.079698775
A0460.10342.F.2.KL.2009  0.077540395 -0.191664898 -0.1173467346  0.394928917
A0382.10137.F.4.KL.2009 -0.295432186 -0.097749191 -0.0620298141 -0.002258472
A0317.10342.F.2.KL.2009  0.250714223  0.329090995 -0.2481224777 -0.238638706
A0411.10145.F.4.KL.2009 -0.048054700  0.405667800 -0.0726101364  0.319869764
A0423.10342.F.2.KL.2009 -0.441911853  0.008944120 -0.1319691953  0.265345344
A0427.10318.F.3.KL.2009  0.146988298  0.213544800  0.1031630212  0.370570812
A0744.10462.F.1.KL.2009  0.128418843 -0.061870016  0.1385811456 -0.242465193
A0402.10391.F.2.KL.2009  0.413619997 -0.116324096  0.3663482059  0.114046590
A0454.10265.F.4.KL.2009 -0.038003029 -0.007114357 -0.0032908579  0.040836665
A0694.10184.F.3.KL.2009  0.332677997 -0.288590311 -0.3986194453  0.201460487
A0644.10317.F.3.KL.2009 -0.329072093 -0.085628117 -0.0734941758 -0.028953289
A0704.10140.F.4.KL.2009 -0.007400994 -0.240579881  0.0229788706 -0.250387385
A0354.10748.F.2.KL.2009 -0.306797084  0.008211601 -0.1334151622 -0.313043245
A0498.10183.F.4.KL.2009  0.096849686 -0.125754104  0.4626685848 -0.016948275
A0365.10517.F.2.KL.2009 -0.036715000  0.007687546  0.0006366415  0.079698775
                                PCNM9        PCNM10        PCNM11
A0439.11177.F.1.KL.2009  0.0126172369 -0.0007010929 -1.127195e-03
A0021.10265.F.4.KL.2009  0.0111990642  0.4812840622 -1.387988e-01
A0680.11176.F.1.KL.2009  0.0023014451 -0.1549549353 -4.767364e-01
A0455.10137.F.4.KL.2009  0.0005112037 -0.0107779343 -1.326078e-04
A0671.11489.F.2.KL.2009  0.0008639461 -0.0093200375  1.090017e-04
A0711.10517.F.2.KL.2009 -0.0144651119 -0.4773849716  1.387344e-01
A0460.10342.F.2.KL.2009 -0.0174261717  0.1545343074  4.765943e-01
A0382.10137.F.4.KL.2009  0.7063206992 -0.0242987702 -6.082223e-04
A0317.10342.F.2.KL.2009  0.0177736988  0.0174674257  1.090700e-03
A0411.10145.F.4.KL.2009  0.0087421321  0.0147608167 -3.091601e-04
A0423.10342.F.2.KL.2009  0.0276981409  0.0181120755 -2.829305e-03
A0427.10318.F.3.KL.2009 -0.0322018231 -0.1312654746 -4.835973e-01
A0744.10462.F.1.KL.2009  0.0037674937  0.1139467788  4.844006e-01
A0402.10391.F.2.KL.2009 -0.0190385261  0.0017111448  3.720705e-03
A0454.10265.F.4.KL.2009  0.0111990642  0.4812840622 -1.387988e-01
A0694.10184.F.3.KL.2009 -0.0010857099  0.0010411025 -2.885499e-04
A0644.10317.F.3.KL.2009 -0.7052528009  0.0142240267  3.948039e-04
A0704.10140.F.4.KL.2009  0.0001307734 -0.0142524818  7.491097e-05
A0354.10748.F.2.KL.2009 -0.0024594110 -0.0187064305  2.856077e-03
A0498.10183.F.4.KL.2009  0.0032697681  0.0206812977 -3.483375e-03
A0365.10517.F.2.KL.2009 -0.0144651119 -0.4773849716  1.387344e-01
                              PCNM1       PCNM2       PCNM3        PCNM4
A0896.11489.F.2.KL.2009 -0.09120194 -0.26721392  0.13031154  0.388724152
A0800.11177.F.1.KL.2009 -0.12792496  0.03343361 -0.15349781  0.222365413
A0784.10408.F.2.KL.2009 -0.08620589  0.50481682 -0.11780285  0.001303069
A0958.11176.F.1.KL.2009 -0.12366030  0.02238947 -0.19456054 -0.350316546
A0922.10265.F.4.KL.2009 -0.09085576 -0.27279989  0.09080224 -0.115182666
A0538.10145.F.4.KL.2009  0.49232860  0.06684045  0.12620698 -0.004921199
A0980.10342.F.2.KL.2009 -0.17248609  0.11552556  0.45972068  0.075874669
A0817.11171.F.1.KL.2009 -0.08620589  0.50481682 -0.11780285  0.001303069
A0937.10145.F.4.KL.2009  0.49232860  0.06684045  0.12620698 -0.004921199
A0978.10746.F.2.KL.2009 -0.08576498 -0.27111075  0.05844087 -0.571522753
A0626.10145.F.4.KL.2009  0.49232860  0.06684045  0.12620698 -0.004921199
A0909.11489.F.2.KL.2009 -0.09120194 -0.26721392  0.13031154  0.388724152
A0983.10177.M.4.KL.2009 -0.12792496  0.03343361 -0.15349781  0.222365413
A0841.10121.M.4.KL.2009 -0.12792496  0.03343361 -0.15349781  0.222365413
A0681.10121.M.4.KL.2009 -0.17162071  0.12553318  0.44581776 -0.158700283
A0555.10724.M.2.KL.2009  0.24911957 -0.27785270 -0.53662624  0.030877815
A0964.11176.F.1.KL.2009 -0.12522586  0.02079766 -0.18476261 -0.202253982
A0805.11176.F.1.KL.2009 -0.12704539  0.03428936 -0.17277931 -0.025980674
A0727.10265.F.4.KL.2009 -0.09085576 -0.27279989  0.09080224 -0.115182666
                                PCNM5
A0896.11489.F.2.KL.2009  0.1247563092
A0800.11177.F.1.KL.2009 -0.1474861121
A0784.10408.F.2.KL.2009  0.0083221810
A0958.11176.F.1.KL.2009  0.3113981330
A0922.10265.F.4.KL.2009 -0.0488705365
A0538.10145.F.4.KL.2009  0.0007117051
A0980.10342.F.2.KL.2009  0.4270357064
A0817.11171.F.1.KL.2009  0.0083221810
A0937.10145.F.4.KL.2009  0.0007117051
A0978.10746.F.2.KL.2009 -0.1626824637
A0626.10145.F.4.KL.2009  0.0007117051
A0909.11489.F.2.KL.2009  0.1247563092
A0983.10177.M.4.KL.2009 -0.1474861121
A0841.10121.M.4.KL.2009 -0.1474861121
A0681.10121.M.4.KL.2009 -0.4285686618
A0555.10724.M.2.KL.2009 -0.0073616203
A0964.11176.F.1.KL.2009  0.5135115555
A0805.11176.F.1.KL.2009 -0.3814253354
A0727.10265.F.4.KL.2009 -0.0488705365
                              PCNM1       PCNM2        PCNM3       PCNM4
A0572.11489.F.2.KL.2009 -0.37533875  0.04879990 -0.489092474  0.09802188
A0828.11176.F.1.KL.2009 -0.05193083  0.23043278  0.017786700  0.25292426
A1207.10265.F.4.KL.2009 -0.06653588  0.23471219  0.003740762  0.19133752
A1071.10746.F.2.KL.2009  0.18900197  0.31859945  0.484979665 -0.38569778
A0863.11177.F.1.KL.2009 -0.41485355 -0.24882175  0.006462603  0.20800901
A1053.11171.F.1.KL.2009 -0.13865827 -0.67759126  0.508188472  0.03710906
A0792.10517.F.2.KL.2009 -0.32102598  0.19042971 -0.025300606 -0.65511483
A0879.10285.F.2.KL.2009  0.41839250  0.04175301  0.002761719  0.21619624
A1086.10285.F.2.KL.2009  0.41839250  0.04175301  0.002761719  0.21619624
A1155.10145.F.4.KL.2009  0.40909216 -0.41477922 -0.516029321 -0.37031914
A0591.10265.F.4.KL.2009 -0.06653588  0.23471219  0.003740762  0.19133752
                               PCNM5
A0572.11489.F.2.KL.2009  0.055089123
A0828.11176.F.1.KL.2009 -0.803297095
A1207.10265.F.4.KL.2009  0.413862794
A1071.10746.F.2.KL.2009  0.008955055
A0863.11177.F.1.KL.2009 -0.053911361
A1053.11171.F.1.KL.2009  0.039494394
A0792.10517.F.2.KL.2009 -0.062499012
A0879.10285.F.2.KL.2009  0.006288942
A1086.10285.F.2.KL.2009  0.006288942
A1155.10145.F.4.KL.2009 -0.024134577
A0591.10265.F.4.KL.2009  0.413862794
                               PCNM1        PCNM2        PCNM3        PCNM4
A1109.10182.F.4.KL.2009 -0.162939005  0.008982237 -0.348275063  0.105134668
A1074.10686.F.2.KL.2009 -0.252206238  0.156025145 -0.071601984 -0.027541179
A1323.11176.F.1.KL.2009 -0.051503155  0.260414955  0.147448483 -0.231958227
A1016.10374.F.2.KL.2009 -0.252206238  0.156025145 -0.071601984 -0.027541179
A1085.10746.F.2.KL.2009 -0.142303675  0.107191412 -0.063685665 -0.113678527
A1578.11171.F.1.KL.2009 -0.004604112 -0.340070566 -0.018172483 -0.149101318
A1116.10517.F.2.KL.2009  0.250026956  0.074670535 -0.056913560  0.127165577
A1126.11171.F.1.KL.2009  0.051448584 -0.259699995 -0.039563514 -0.440209814
A1124.11489.F.2.KL.2009  0.250026956  0.074670535 -0.056913560  0.127165577
A1341.10686.F.2.KL.2009 -0.252924963  0.155309842 -0.074822922 -0.025065254
A1678.11171.F.1.KL.2009 -0.004604112 -0.340070566 -0.018172483 -0.149101318
A1001.10759.F.1.KL.2009 -0.019215756 -0.238441000  0.091272847  0.308391420
A1175.10746.F.2.KL.2009 -0.195889444  0.112999111 -0.291050611 -0.022754846
A1699.10391.F.2.KL.2009 -0.008839839 -0.237982133 -0.013428741 -0.063215279
A1037.10342.F.2.KL.2009  0.228102823  0.034513688 -0.030254334 -0.271618590
A1719.10754.F.1.KL.2009 -0.050648321 -0.104799254  0.199916316  0.107622303
A1320.10517.F.2.KL.2009  0.234898877  0.156250263  0.007645706  0.037102091
A1383.10318.F.3.KL.2009  0.054505126 -0.146289276 -0.032073607 -0.358520564
A1014.10461.F.1.KL.2009 -0.011626785 -0.219959016  0.028232903  0.256114027
A1689.11177.F.1.KL.2009  0.228102823  0.034513688 -0.030254334 -0.271618590
A1376.10182.F.4.KL.2009 -0.162939005  0.008982237 -0.348275063  0.105134668
A1113.10375.F.2.KL.2009  0.250658880  0.074149428 -0.057172043  0.118580171
A1023.11489.F.2.KL.2009  0.201853678  0.063233686 -0.044011066  0.279972571
A1132.10285.F.2.KL.2009 -0.175046286  0.076844674  0.343704907  0.008110658
A1090.10285.F.2.KL.2009 -0.175046286  0.076844674  0.343704907  0.008110658
A1202.10517.F.2.KL.2009  0.234898877  0.156250263  0.007645706  0.037102091
A1022.10517.F.2.KL.2009  0.234898877  0.156250263  0.007645706  0.037102091
A1219.10517.F.2.KL.2009  0.234898877  0.156250263  0.007645706  0.037102091
A1011.10374.F.2.KL.2009 -0.100424994  0.250237079  0.157589631 -0.076830315
A1127.11171.F.1.KL.2009 -0.072184540 -0.105541473  0.296615609  0.179090270
A1284.10377.F.2.KL.2009 -0.169633999  0.094255343  0.301822737 -0.023520671
A1137.10130.F.4.KL.2009 -0.014022551 -0.129296491  0.053952358  0.103014298
A1270.10182.F.4.KL.2009 -0.162939005  0.008982237 -0.348275063  0.105134668
A1706.10140.F.4.KL.2009 -0.012573027 -0.331696931  0.019674554  0.165125773
                               PCNM5        PCNM6         PCNM7        PCNM8
A1109.10182.F.4.KL.2009  0.163718874 -0.028265936 -1.023845e-01  0.126042464
A1074.10686.F.2.KL.2009 -0.011825732 -0.005374877 -5.830205e-02  0.031428585
A1323.11176.F.1.KL.2009 -0.193843523  0.138241492  1.141910e-01  0.187967118
A1016.10374.F.2.KL.2009 -0.011825732 -0.005374877 -5.830205e-02  0.031428585
A1085.10746.F.2.KL.2009 -0.273752324  0.100763414  3.110443e-01 -0.535501648
A1578.11171.F.1.KL.2009 -0.256198846 -0.245550181 -1.136985e-01  0.066331570
A1116.10517.F.2.KL.2009  0.064429133 -0.072479399 -9.141696e-02 -0.084570674
A1126.11171.F.1.KL.2009  0.119616939  0.031589531 -6.749461e-02 -0.064776296
A1124.11489.F.2.KL.2009  0.064429133 -0.072479399 -9.141696e-02 -0.084570674
A1341.10686.F.2.KL.2009 -0.006826961 -0.007013390 -6.264518e-02  0.038137552
A1678.11171.F.1.KL.2009 -0.256198846 -0.245550181 -1.136985e-01  0.066331570
A1001.10759.F.1.KL.2009 -0.037918670  0.446337274  1.065514e-02 -0.141673851
A1175.10746.F.2.KL.2009 -0.109136831  0.068181072  1.652983e-01 -0.201290300
A1699.10391.F.2.KL.2009 -0.196994643 -0.329064342 -9.803963e-02 -0.177722375
A1037.10342.F.2.KL.2009  0.168582531  0.178633884 -9.021856e-06  0.095750562
A1719.10754.F.1.KL.2009  0.316260166 -0.288378431  4.602375e-01  0.136730494
A1320.10517.F.2.KL.2009 -0.099503456 -0.016827111  1.643223e-02  0.090518918
A1383.10318.F.3.KL.2009  0.300456453  0.230762763  4.217787e-02 -0.177489912
A1014.10461.F.1.KL.2009 -0.098570280  0.393513809  1.544727e-01  0.195634388
A1689.11177.F.1.KL.2009  0.168582531  0.178633884 -9.021856e-06  0.095750562
A1376.10182.F.4.KL.2009  0.163718874 -0.028265936 -1.023845e-01  0.126042464
A1113.10375.F.2.KL.2009  0.069926660 -0.064940367 -9.033572e-02 -0.074825279
A1023.11489.F.2.KL.2009 -0.045706407 -0.205925544 -9.100783e-02 -0.248060553
A1132.10285.F.2.KL.2009  0.134157291 -0.100342272 -8.638663e-02  0.120132573
A1090.10285.F.2.KL.2009  0.134157291 -0.100342272 -8.638663e-02  0.120132573
A1202.10517.F.2.KL.2009 -0.099503456 -0.016827111  1.643223e-02  0.090518918
A1022.10517.F.2.KL.2009 -0.099503456 -0.016827111  1.643223e-02  0.090518918
A1219.10517.F.2.KL.2009 -0.099503456 -0.016827111  1.643223e-02  0.090518918
A1011.10374.F.2.KL.2009 -0.308894415  0.003588523  1.191800e-01  0.010923135
A1127.11171.F.1.KL.2009  0.193223062  0.134159561 -3.136079e-01 -0.403314801
A1284.10377.F.2.KL.2009  0.028153004  0.009045111 -2.964749e-01  0.004872444
A1137.10130.F.4.KL.2009  0.227889976 -0.212666228  5.400260e-01 -0.070441650
A1270.10182.F.4.KL.2009  0.163718874 -0.028265936 -1.023845e-01  0.126042464
A1706.10140.F.4.KL.2009 -0.275313755  0.194137695  4.337370e-02  0.322483236
                                PCNM9      PCNM10      PCNM11       PCNM12
A1109.10182.F.4.KL.2009  0.1001968041 -0.08345880  0.00079138  0.023100263
A1074.10686.F.2.KL.2009 -0.1241648005  0.10535144 -0.02267002 -0.072439810
A1323.11176.F.1.KL.2009  0.2344730028  0.09954332  0.12183680 -0.036252904
A1016.10374.F.2.KL.2009 -0.1241648005  0.10535144 -0.02267002 -0.072439810
A1085.10746.F.2.KL.2009 -0.1891403003  0.25242799  0.15821264  0.031369093
A1578.11171.F.1.KL.2009 -0.0360128534 -0.04932218  0.15861083 -0.008096134
A1116.10517.F.2.KL.2009 -0.1437780555  0.22329449  0.09084207 -0.046239932
A1126.11171.F.1.KL.2009 -0.2402687543 -0.29024235  0.10390405  0.035246766
A1124.11489.F.2.KL.2009 -0.1437780555  0.22329449  0.09084207 -0.046239932
A1341.10686.F.2.KL.2009 -0.1216265385  0.10214390 -0.02311423 -0.065883106
A1678.11171.F.1.KL.2009 -0.0360128534 -0.04932218  0.15861083 -0.008096134
A1001.10759.F.1.KL.2009  0.1838084446 -0.06789385  0.07034081  0.102667495
A1175.10746.F.2.KL.2009  0.1230248412 -0.09337005  0.16037223  0.176504213
A1699.10391.F.2.KL.2009  0.4831847712  0.35808670 -0.47140753  0.075458427
A1037.10342.F.2.KL.2009  0.1120486404  0.17398690  0.09554919 -0.023240719
A1719.10754.F.1.KL.2009 -0.0412204156  0.06589004  0.07073906  0.363507495
A1320.10517.F.2.KL.2009  0.1043865871 -0.15052965 -0.02485451  0.035878572
A1383.10318.F.3.KL.2009 -0.1518988827 -0.12599637 -0.45358580  0.067974579
A1014.10461.F.1.KL.2009 -0.1268832859  0.18042011 -0.40089866 -0.020723428
A1689.11177.F.1.KL.2009  0.1120486404  0.17398690  0.09554919 -0.023240719
A1376.10182.F.4.KL.2009  0.1001968041 -0.08345880  0.00079138  0.023100263
A1113.10375.F.2.KL.2009 -0.1278629243  0.25192829  0.11141472 -0.053533026
A1023.11489.F.2.KL.2009 -0.3727404007 -0.25057458 -0.23081786  0.052298982
A1132.10285.F.2.KL.2009 -0.0943958240  0.07949142  0.00690951  0.222569845
A1090.10285.F.2.KL.2009 -0.0943958240  0.07949142  0.00690951  0.222569845
A1202.10517.F.2.KL.2009  0.1043865871 -0.15052965 -0.02485451  0.035878572
A1022.10517.F.2.KL.2009  0.1043865871 -0.15052965 -0.02485451  0.035878572
A1219.10517.F.2.KL.2009  0.1043865871 -0.15052965 -0.02485451  0.035878572
A1011.10374.F.2.KL.2009 -0.0001711753 -0.37626956 -0.19359486  0.075021855
A1127.11171.F.1.KL.2009  0.3084073728 -0.18222655  0.27195194  0.059850086
A1284.10377.F.2.KL.2009 -0.0475174001 -0.01501119 -0.11289946 -0.553293404
A1137.10130.F.4.KL.2009  0.1543732921 -0.15364916  0.04713741 -0.600139336
A1270.10182.F.4.KL.2009  0.1001968041 -0.08345880  0.00079138  0.023100263
A1706.10140.F.4.KL.2009 -0.2134726214  0.03168417  0.20896947 -0.067995363
                               PCNM13        PCNM14        PCNM15        PCNM16
A1109.10182.F.4.KL.2009  4.905628e-05  7.361224e-05  1.197193e-03 -6.549269e-04
A1074.10686.F.2.KL.2009 -2.021305e-03 -1.182506e-02  3.730989e-01 -1.656045e-01
A1323.11176.F.1.KL.2009 -9.319822e-03 -2.761080e-01  1.853786e-01  4.364989e-01
A1016.10374.F.2.KL.2009 -2.021305e-03 -1.182506e-02  3.730989e-01 -1.656045e-01
A1085.10746.F.2.KL.2009 -2.365126e-04 -4.817139e-03 -8.697717e-03  1.122864e-02
A1578.11171.F.1.KL.2009 -1.061924e-02 -1.622620e-04 -2.462657e-05 -3.156796e-05
A1116.10517.F.2.KL.2009 -3.692084e-03 -2.779472e-01 -1.507480e-01 -3.243179e-01
A1126.11171.F.1.KL.2009 -4.979969e-01 -3.907784e-03  3.753623e-04  8.530592e-04
A1124.11489.F.2.KL.2009 -3.692084e-03 -2.779472e-01 -1.507480e-01 -3.243179e-01
A1341.10686.F.2.KL.2009 -1.474694e-03  2.101881e-02 -7.462929e-01  3.298677e-01
A1678.11171.F.1.KL.2009 -1.061924e-02 -1.622620e-04 -2.462657e-05 -3.156796e-05
A1001.10759.F.1.KL.2009 -5.510994e-03 -4.326547e-03  2.018966e-03  3.146212e-03
A1175.10746.F.2.KL.2009  1.473892e-03  4.311949e-04  7.280378e-03 -2.691647e-03
A1699.10391.F.2.KL.2009  1.684059e-02 -1.287176e-03 -4.190956e-04 -9.290837e-04
A1037.10342.F.2.KL.2009 -3.728865e-04 -4.255304e-03 -5.839495e-04 -3.061323e-04
A1719.10754.F.1.KL.2009 -2.294366e-05 -1.335445e-03  4.694582e-03  1.692373e-04
A1320.10517.F.2.KL.2009  1.574920e-04  1.607378e-03 -8.855467e-04 -3.666860e-04
A1383.10318.F.3.KL.2009  5.055975e-01  1.079905e-02  3.144346e-04 -1.224807e-03
A1014.10461.F.1.KL.2009 -4.911369e-01 -9.492157e-04 -2.099899e-03 -3.257833e-03
A1689.11177.F.1.KL.2009 -3.728865e-04 -4.255304e-03 -5.839495e-04 -3.061323e-04
A1376.10182.F.4.KL.2009  4.905628e-05  7.361224e-05  1.197193e-03 -6.549269e-04
A1113.10375.F.2.KL.2009 -1.576922e-02  7.968917e-01  1.121221e-01  1.983995e-01
A1023.11489.F.2.KL.2009  1.922293e-02 -2.378499e-01  1.946384e-01  4.538696e-01
A1132.10285.F.2.KL.2009  5.795134e-05 -3.426585e-06 -4.305359e-05 -7.085981e-06
A1090.10285.F.2.KL.2009  5.795134e-05 -3.426585e-06 -4.305359e-05 -7.085981e-06
A1202.10517.F.2.KL.2009  1.574920e-04  1.607378e-03 -8.855467e-04 -3.666860e-04
A1022.10517.F.2.KL.2009  1.574920e-04  1.607378e-03 -8.855467e-04 -3.666860e-04
A1219.10517.F.2.KL.2009  1.574920e-04  1.607378e-03 -8.855467e-04 -3.666860e-04
A1011.10374.F.2.KL.2009  9.560059e-03  2.769053e-01 -1.848540e-01 -4.357799e-01
A1127.11171.F.1.KL.2009  1.456562e-03 -1.640541e-04 -1.540004e-07 -3.311824e-06
A1284.10377.F.2.KL.2009 -5.690643e-05  2.788853e-03 -2.384295e-03 -4.108636e-03
A1137.10130.F.4.KL.2009 -3.856317e-03 -2.530128e-04 -5.121127e-03 -1.155840e-03
A1270.10182.F.4.KL.2009  4.905628e-05  7.361224e-05  1.197193e-03 -6.549269e-04
A1706.10140.F.4.KL.2009  5.037476e-01  3.899543e-03 -4.015441e-04 -9.158700e-04
                               PCNM1       PCNM2       PCNM3        PCNM4
A1710.10391.F.2.KL.2009  0.319792802  0.14980949 -0.18136744 -0.441564360
A1614.10754.F.1.KL.2009 -0.087227624  0.30016768  0.38935634 -0.017861650
A1629.10746.F.2.KL.2009 -0.181281389 -0.08404232 -0.22370066 -0.004358792
A1890.10130.F.4.KL.2009  0.009758756  0.25721885  0.52041007 -0.057995405
A1749.10746.F.2.KL.2009 -0.196310355 -0.01227327 -0.27642169  0.032031503
A1625.10374.F.2.KL.2009 -0.184467488 -0.08377719 -0.22419382 -0.004723598
A1335.11177.F.1.KL.2009  0.388001217  0.11391339 -0.10639263  0.117372829
A1533.10759.F.1.KL.2009  0.261759252  0.11354657 -0.07230474  0.750883841
A1747.10182.F.4.KL.2009 -0.175528219  0.26270403  0.09967855  0.002447276
A1617.10686.F.2.KL.2009 -0.211972471  0.04660347 -0.13214649  0.019147180
A1970.10818.F.1.KL.2009  0.355277898  0.16988504 -0.20373700  0.139093725
A1652.10375.F.2.KL.2009 -0.006843202 -0.34624646 -0.05379917 -0.003884385
A1672.11489.F.2.KL.2009  0.085768893 -0.35927622  0.14531088 -0.052202816
A1613.10285.F.2.KL.2009 -0.207003288  0.16333836  0.08861610 -0.019153288
A1732.11150.F.0.KL.2009  0.198428819 -0.30717197  0.28108740  0.036022992
A1712.10285.F.2.KL.2009 -0.207955515  0.11206441 -0.10175332  0.020419405
A1876.10285.F.2.KL.2009 -0.207003288  0.16333836  0.08861610 -0.019153288
A1586.10140.F.4.KL.2009 -0.101381513 -0.26332014 -0.02166710 -0.014837280
A1342.10391.F.2.KL.2009  0.319792802  0.14980949 -0.18136744 -0.441564360
A1660.10318.F.3.KL.2009  0.141747897 -0.32957490  0.31958966 -0.044429427
A1661.10140.F.4.KL.2009 -0.101381513 -0.26332014 -0.02166710 -0.014837280
A1513.10686.F.2.KL.2009 -0.211972471  0.04660347 -0.13214649  0.019147180
                               PCNM5        PCNM6        PCNM7       PCNM8
A1710.10391.F.2.KL.2009  0.011053298  0.002820872 -0.036298659  0.05530041
A1614.10754.F.1.KL.2009  0.171306644 -0.336248092 -0.368926717 -0.07262696
A1629.10746.F.2.KL.2009 -0.324249728  0.109938098 -0.077283893 -0.14543678
A1890.10130.F.4.KL.2009 -0.305510954  0.133745008  0.275224407  0.24642917
A1749.10746.F.2.KL.2009 -0.003726054 -0.035153245  0.487293992  0.16063851
A1625.10374.F.2.KL.2009 -0.308672264  0.125579624 -0.081835673 -0.14106520
A1335.11177.F.1.KL.2009  0.140285670  0.002728744  0.281935743 -0.42855940
A1533.10759.F.1.KL.2009 -0.058901745  0.043211571 -0.089222794  0.12352226
A1747.10182.F.4.KL.2009 -0.317425234 -0.166351550  0.129644082 -0.31050218
A1617.10686.F.2.KL.2009  0.149231770 -0.335986082 -0.068607616  0.04348910
A1970.10818.F.1.KL.2009 -0.043032273  0.048648869 -0.201490994  0.31290155
A1652.10375.F.2.KL.2009 -0.188292739 -0.511575583  0.139238485  0.20825325
A1672.11489.F.2.KL.2009 -0.410154858  0.160309330 -0.381517448 -0.19335527
A1613.10285.F.2.KL.2009  0.085135349  0.286647005  0.098799330  0.11181391
A1732.11150.F.0.KL.2009  0.230735379 -0.044777538  0.307310604 -0.42328300
A1712.10285.F.2.KL.2009  0.322022954  0.172211003 -0.301581882 -0.27579192
A1876.10285.F.2.KL.2009  0.085135349  0.286647005  0.098799330  0.11181391
A1586.10140.F.4.KL.2009  0.240982570  0.219652754 -0.000234364  0.12479641
A1342.10391.F.2.KL.2009  0.011053298  0.002820872 -0.036298659  0.05530041
A1660.10318.F.3.KL.2009  0.122809229 -0.048535338 -0.106105293  0.26807629
A1661.10140.F.4.KL.2009  0.240982570  0.219652754 -0.000234364  0.12479641
A1513.10686.F.2.KL.2009  0.149231770 -0.335986082 -0.068607616  0.04348910
                               PCNM9        PCNM10
A1710.10391.F.2.KL.2009  0.009098622 -5.449018e-06
A1614.10754.F.1.KL.2009 -0.138140017 -5.846466e-03
A1629.10746.F.2.KL.2009 -0.071925661 -7.071973e-01
A1890.10130.F.4.KL.2009 -0.150078629  8.303926e-04
A1749.10746.F.2.KL.2009  0.313673810 -3.229671e-03
A1625.10374.F.2.KL.2009 -0.083839125  7.066866e-01
A1335.11177.F.1.KL.2009 -0.184155652  2.647555e-05
A1533.10759.F.1.KL.2009  0.009287261 -6.238327e-05
A1747.10182.F.4.KL.2009  0.486146406  1.508061e-02
A1617.10686.F.2.KL.2009 -0.165557408  1.165571e-03
A1970.10818.F.1.KL.2009  0.079738204  1.118671e-03
A1652.10375.F.2.KL.2009 -0.161518412  8.929363e-03
A1672.11489.F.2.KL.2009 -0.105387008  1.090778e-04
A1613.10285.F.2.KL.2009 -0.160826510 -4.318062e-03
A1732.11150.F.0.KL.2009 -0.065184500  5.273504e-05
A1712.10285.F.2.KL.2009  0.328121031 -2.423270e-03
A1876.10285.F.2.KL.2009 -0.160826510 -4.318062e-03
A1586.10140.F.4.KL.2009 -0.085281002 -5.366870e-03
A1342.10391.F.2.KL.2009  0.009098622 -5.449018e-06
A1660.10318.F.3.KL.2009  0.548394889  2.974745e-03
A1661.10140.F.4.KL.2009 -0.085281002 -5.366870e-03
A1513.10686.F.2.KL.2009 -0.165557408  1.165571e-03
[1] "Acessing PCNM scores"
[1] "Analysis for Core OTUs"
[1] "Variance partitioning - Core OTUs"
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[1L]], X = dots[[2L]][[1L]], ~., data = dots[[3L]][[1L]])

Explanatory tables:
X1:  dots[[2L]][[1L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 607.29 
            Variance: 37.955 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.54356       0.08712     TRUE
[b+c] = X2            7   0.58486       0.26197     TRUE
[a+b+c] = X1+X2      14   0.81769      -0.45849     TRUE
Individual fractions                                    
[a] = X1|X2           7                -0.72046     TRUE
[b]                   0                 0.80758    FALSE
[c] = X2|X1           6                -0.54561     TRUE
[d] = Residuals                         1.45849    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 4`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[2L]], X = dots[[2L]][[2L]], ~., data = dots[[3L]][[2L]])

Explanatory tables:
X1:  dots[[2L]][[2L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 613.74 
            Variance: 30.687 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.54602      -0.00883     TRUE
[b+c] = X2           11   0.51907      -0.06874     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 5`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[3L]], X = dots[[2L]][[3L]], ~., data = dots[[3L]][[3L]])

Explanatory tables:
X1:  dots[[2L]][[3L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 584.15 
            Variance: 32.453 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.24920      -0.03956     TRUE
[b+c] = X2           12   0.79399       0.38197     TRUE
[a+b+c] = X1+X2      17   0.94960       0.09280     TRUE
Individual fractions                                    
[a] = X1|X2           5                -0.28917     TRUE
[b]                   0                 0.24961    FALSE
[c] = X2|X1          12                 0.13236     TRUE
[d] = Residuals                         0.90720    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 6`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[4L]], X = dots[[2L]][[4L]], ~., data = dots[[3L]][[4L]])

Explanatory tables:
X1:  dots[[2L]][[4L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 213.29 
            Variance: 21.329 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.44577      -0.10845     TRUE
[b+c] = X2            8   0.87548       0.37739     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           2                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           5                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 7`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[5L]], X = dots[[2L]][[5L]], ~., data = dots[[3L]][[5L]])

Explanatory tables:
X1:  dots[[2L]][[5L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 752.11 
            Variance: 22.791 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           16   0.50556       0.04020     TRUE
[b+c] = X2           17   0.59533       0.16537     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          16                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          17                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 8`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[6L]], X = dots[[2L]][[6L]], ~., data = dots[[3L]][[6L]])

Explanatory tables:
X1:  dots[[2L]][[6L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 434.88 
            Variance: 20.709 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           10   0.48218       0.01143     TRUE
[b+c] = X2            9   0.45745       0.05054     TRUE
[a+b+c] = X1+X2      19   0.89990      -0.05105     TRUE
Individual fractions                                    
[a] = X1|X2          10                -0.10159     TRUE
[b]                   0                 0.11302    FALSE
[c] = X2|X1           9                -0.06248     TRUE
[d] = Residuals                         1.05105    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
[1] "Testing with RDA (full model) - core OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

              Inertia Proportion Rank
Total         37.9554     1.0000     
Constrained   22.1986     0.5849    7
Unconstrained 15.7568     0.4151    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7 
13.173  3.065  2.057  1.991  1.106  0.626  0.181 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
8.423 2.151 1.687 1.448 0.794 0.551 0.361 0.298 0.045 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

              Inertia Proportion Rank
Total         30.6870     1.0000     
Constrained   15.9287     0.5191   11
Unconstrained 14.7583     0.4809    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 
4.678 3.532 2.125 1.589 1.521 1.141 0.738 0.327 0.137 0.101 0.041 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
4.886 2.551 2.137 1.763 1.583 1.132 0.482 0.153 0.071 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear, data = data)

              Inertia Proportion Rank
Total          32.453      1.000     
Constrained    25.767      0.794   12
Unconstrained   6.686      0.206    6
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
12.011  5.689  3.268  1.550  1.455  0.772  0.509  0.235  0.166  0.068  0.038 
 RDA12 
 0.006 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6 
2.8603 1.4712 1.2185 0.5426 0.3742 0.2187 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

              Inertia Proportion Rank
Total         21.3292     1.0000     
Constrained   18.6733     0.8755    8
Unconstrained  2.6559     0.1245    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8 
7.805 4.315 2.181 1.796 1.096 0.830 0.518 0.131 

Eigenvalues for unconstrained axes:
   PC1    PC2 
1.9144 0.7416 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

              Inertia Proportion Rank
Total         22.7913     1.0000     
Constrained   13.5683     0.5953   12
Unconstrained  9.2230     0.4047   12
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
4.152 3.020 1.837 1.495 0.885 0.771 0.440 0.416 0.240 0.215 0.076 0.021 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
3.444 1.780 1.146 0.912 0.718 0.406 0.297 0.185 0.136 0.114 0.079 0.007 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

              Inertia Proportion Rank
Total         20.7086     1.0000     
Constrained    9.4732     0.4575    9
Unconstrained 11.2354     0.5425   12
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
3.418 1.820 1.335 1.198 0.749 0.500 0.246 0.127 0.080 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
3.592 2.770 1.641 1.358 0.587 0.440 0.324 0.231 0.171 0.098 0.015 0.009 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)  
Model     7   22.199 1.8113  0.042 *
Residual  9   15.757                
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    11   15.929 0.8831  0.742
Residual  9   14.758              

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)  
Model    12  25.7670 1.9271  0.026 *
Residual  6   6.6855                
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 6`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)  
Model     8  18.6733 1.7577  0.083 .
Residual  2   2.6559                
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)  
Model    17   13.568 1.3846  0.035 *
Residual 16    9.223                
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     9   9.4732 1.1242  0.274
Residual 12  11.2354              

$`Month 3`
$`Month 3`$r.squared
[1] 0.5848594

$`Month 3`$adj.r.squared
[1] 0.2619723


$`Month 4`
$`Month 4`$r.squared
[1] 0.5190687

$`Month 4`$adj.r.squared
[1] -0.06873632


$`Month 5`
$`Month 5`$r.squared
[1] 0.7939901

$`Month 5`$adj.r.squared
[1] 0.3819702


$`Month 6`
$`Month 6`$r.squared
[1] 0.8754783

$`Month 6`$adj.r.squared
[1] 0.3773915


$`Month 7`
$`Month 7`$r.squared
[1] 0.5953285

$`Month 7`$adj.r.squared
[1] 0.1653651


$`Month 8`
$`Month 8`$r.squared
[1] 0.4574503

$`Month 8`$adj.r.squared
[1] 0.05053807


[1] "Testing with partial RDA (fraction [a]) - core OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

              Inertia Proportion Rank
Total         37.9554     1.0000     
Conditional   20.6310     0.5436    8
Constrained   10.4047     0.2741    6
Unconstrained  6.9197     0.1823    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6 
4.550 2.532 1.212 1.134 0.563 0.414 

Eigenvalues for unconstrained axes:
  PC1   PC2 
6.459 0.461 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

              Inertia Proportion Rank
Total          30.687      1.000     
Conditional    16.756      0.546   11
Constrained    13.931      0.454    9
Unconstrained   0.000      0.000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
4.223 3.615 1.633 1.360 1.068 0.860 0.737 0.283 0.151 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear + Condition(scores(y)), data = data)

              Inertia Proportion Rank
Total         32.4525     1.0000     
Conditional    8.0873     0.2492    5
Constrained   22.7296     0.7004   12
Unconstrained  1.6356     0.0504    1
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
12.331  3.700  2.190  1.552  1.148  0.801  0.477  0.311  0.138  0.039  0.037 
 RDA12 
 0.004 

Eigenvalues for unconstrained axes:
   PC1 
1.6356 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

              Inertia Proportion Rank
Total         21.3292     1.0000     
Conditional    9.5080     0.4458    5
Constrained   11.8212     0.5542    5
Unconstrained  0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5 
5.763 3.154 1.387 0.950 0.567 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

              Inertia Proportion Rank
Total         22.7913     1.0000     
Conditional   11.5224     0.5056   16
Constrained   11.2689     0.4944   12
Unconstrained  0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
3.659 2.819 1.066 1.030 0.790 0.718 0.508 0.318 0.154 0.114 0.073 0.021 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

              Inertia Proportion Rank
Total         20.7086     1.0000     
Conditional    9.9852     0.4822   10
Constrained    8.6505     0.4177    9
Unconstrained  2.0729     0.1001    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9 
3.0163 1.5909 1.2723 0.9560 0.7458 0.5099 0.2572 0.2048 0.0973 

Eigenvalues for unconstrained axes:
   PC1    PC2 
1.3588 0.7141 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     6  10.4047 0.5012  0.855
Residual  2   6.9197              

$`Month 4`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     9   13.931         
Residual  0    0.000         

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model    12  22.7296 1.1581  0.565
Residual  1   1.6356              

$`Month 6`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     5   11.821         
Residual  0    0.000         

$`Month 7`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model    17   11.269         
Residual  0    0.000         

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     9   8.6505 0.9273  0.613
Residual  2   2.0729              

$`Month 3`
$`Month 3`$r.squared
[1] 0.2741293

$`Month 3`$adj.r.squared
[1] -0.5456078


$`Month 4`
$`Month 4`$r.squared
[1] 0.4539753

$`Month 4`$adj.r.squared
[1] NA


$`Month 5`
$`Month 5`$r.squared
[1] 0.7003955

$`Month 5`$adj.r.squared
[1] 0.1323598


$`Month 6`
$`Month 6`$r.squared
[1] 0.5542254

$`Month 6`$adj.r.squared
[1] NA


$`Month 7`
$`Month 7`$r.squared
[1] 0.4944402

$`Month 7`$adj.r.squared
[1] NA


$`Month 8`
$`Month 8`$r.squared
[1] 0.4177231

$`Month 8`$adj.r.squared
[1] -0.06247922


[1] "Spatial variables - core OTU"
Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
+ PCNM1          0.1118929301
<All variables>  0.0871192774
+ PCNM3          0.0097913441
+ PCNM4          0.0061845190
+ PCNM2          0.0014941290
+ PCNM8          0.0009172279
<none>           0.0000000000
+ PCNM6         -0.0141153250
+ PCNM7         -0.0336338373
+ PCNM5         -0.0360673733

Step: R2.adj= 0 
Call: x ~ 1 
 
                 R2.adjusted
+ PCNM1          0.051991842
+ PCNM5          0.040163957
+ PCNM10         0.011481558
+ PCNM7          0.010497461
<none>           0.000000000
+ PCNM11        -0.002688519
+ PCNM9         -0.003684105
+ PCNM4         -0.007391586
<All variables> -0.008834095
+ PCNM6         -0.013267370
+ PCNM8         -0.025695739
+ PCNM2         -0.027158924
+ PCNM3         -0.038433147

Step: R2.adj= 0 
Call: x ~ 1 
 
                 R2.adjusted
+ PCNM3          0.012049031
<none>           0.000000000
+ PCNM2         -0.001008501
+ PCNM4         -0.009281585
+ PCNM5         -0.015379379
+ PCNM1         -0.016633853
<All variables> -0.039563298

Step: R2.adj= 0 
Call: x ~ 1 
 
                 R2.adjusted
+ PCNM4          0.083046603
+ PCNM2          0.009425224
<none>           0.000000000
+ PCNM3         -0.009747296
+ PCNM5         -0.053611409
+ PCNM1         -0.089363528
<All variables> -0.108450730

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
+ PCNM3          0.0660033314
<All variables>  0.0402044018
+ PCNM1          0.0252450915
+ PCNM12         0.0179628395
+ PCNM15         0.0023186186
<none>           0.0000000000
+ PCNM13        -0.0008181782
+ PCNM9         -0.0009411882
+ PCNM2         -0.0036163556
+ PCNM6         -0.0041255681
+ PCNM8         -0.0045747849
+ PCNM11        -0.0052938069
+ PCNM16        -0.0082365611
+ PCNM7         -0.0087713625
+ PCNM4         -0.0097935193
+ PCNM5         -0.0125202880
+ PCNM14        -0.0141714016
+ PCNM10        -0.0173082781

Step: R2.adj= 0 
Call: x ~ 1 
 
                 R2.adjusted
+ PCNM1          0.021613204
+ PCNM4          0.018050083
+ PCNM8          0.016774232
+ PCNM2          0.015991268
<All variables>  0.011428541
+ PCNM6          0.004256488
+ PCNM9          0.003228698
<none>           0.000000000
+ PCNM3         -0.014245363
+ PCNM5         -0.018889213
+ PCNM7         -0.019354005
+ PCNM10        -0.021139694

$`Month 3`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total           37.96     
Unconstrained   37.96   12
Inertia is variance 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8    PC9   PC10   PC11 
15.916  6.638  4.300  3.214  2.932  2.043  0.965  0.665  0.509  0.449  0.219 
  PC12 
 0.104 


$`Month 4`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total           30.69     
Unconstrained   30.69   12
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
6.959 6.252 4.639 3.469 2.497 2.262 2.186 1.025 0.644 0.416 0.249 0.089 


$`Month 5`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total           32.45     
Unconstrained   32.45   12
Inertia is variance 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8    PC9   PC10   PC11 
14.456  6.128  3.742  2.322  1.669  1.490  1.101  0.710  0.405  0.226  0.162 
  PC12 
 0.040 


$`Month 6`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total           21.33     
Unconstrained   21.33   10
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10 
7.826 4.415 3.275 1.809 1.470 1.125 0.602 0.496 0.290 0.022 


$`Month 7`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total           22.79     
Unconstrained   22.79   12
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
6.769 4.732 2.458 2.051 1.942 1.675 1.112 0.612 0.507 0.488 0.304 0.142 


$`Month 8`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total           20.71     
Unconstrained   20.71   12
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
4.398 4.192 3.241 2.412 1.661 1.513 0.976 0.857 0.605 0.390 0.278 0.185 


[1] "Summary of spatial selection process - core OTU"
$`Month 3`
NULL

$`Month 4`
NULL

$`Month 5`
NULL

$`Month 6`
NULL

$`Month 7`
NULL

$`Month 8`
NULL

[1] "ANOVA on full spatial selection - core OTU"
$`Month 3`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0    0.000  0       
Residual 16   37.955          

$`Month 4`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0    0.000  0       
Residual 20   30.687          

$`Month 5`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0    0.000  0       
Residual 18   32.453          

$`Month 6`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0    0.000  0       
Residual 10   21.329          

$`Month 7`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0    0.000  0       
Residual 33   22.791          

$`Month 8`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0    0.000  0       
Residual 21   20.709          

[1] "Partition Bray-Curtis dissimilarities - core OTUs"
Warning messages:
1: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
2: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
3: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
4: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
5: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
6: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 6.7812 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            7  -0.09517      -0.94697     TRUE
[b+c] = X2            8  -0.26978      -1.53957     TRUE
[a+b+c] = X1+X2      14   0.69273      -1.45820     TRUE
Individual fractions                                    
[a] = X1|X2           6                 0.08137     TRUE
[b]                   0                -1.02834    FALSE
[c] = X2|X1           7                -0.51123     TRUE
[d] = Residuals                         2.45820    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 4`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 1.5398 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.47622      -0.16396     TRUE
[b+c] = X2           11   0.52800      -0.04890     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 5`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 3.3759 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           12   0.85547       0.56642     TRUE
[b+c] = X2            5   0.49268       0.29756     TRUE
[a+b+c] = X1+X2      17   0.97935       0.62833     TRUE
Individual fractions                                    
[a] = X1|X2          12                 0.33077     TRUE
[b]                   0                 0.23565    FALSE
[c] = X2|X1           5                 0.06191     TRUE
[d] = Residuals                         0.37167    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 6`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 0.49774 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.86267       0.31336     TRUE
[b+c] = X2            5   0.43475      -0.13049     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           5                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           2                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 7`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 2.678 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           17   0.57405       0.12149     TRUE
[b+c] = X2           16   0.48854       0.00717     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          17                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          16                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 8`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 1.7396 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            9   0.45647       0.04883     TRUE
[b+c] = X2           10   0.46479      -0.02177     TRUE
[a+b+c] = X1+X2      19   0.93690       0.33746     TRUE
Individual fractions                                    
[a] = X1|X2           9                 0.35922     TRUE
[b]                   0                -0.31040    FALSE
[c] = X2|X1          10                 0.28863     TRUE
[d] = Residuals                         0.66254    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
Warning message:
In rm(abFrac, aFrac, abFrac0, pcnm_df, bcFrac, bcFrac0, step.space) :
  object 'abFrac0' not found
[1] "Analysis for non-core OTUs"
[1] "Variance partitioning - non-core OTUs"
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[1L]], X = dots[[2L]][[1L]], ~., data = dots[[3L]][[1L]])

Explanatory tables:
X1:  dots[[2L]][[1L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 72662 
            Variance: 4541.4 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.55623       0.11245     TRUE
[b+c] = X2            7   0.53054       0.16541     TRUE
[a+b+c] = X1+X2      14   0.92089       0.36711     TRUE
Individual fractions                                    
[a] = X1|X2           7                 0.20170     TRUE
[b]                   0                -0.08925    FALSE
[c] = X2|X1           6                 0.25466     TRUE
[d] = Residuals                         0.63289    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 4`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[2L]], X = dots[[2L]][[2L]], ~., data = dots[[3L]][[2L]])

Explanatory tables:
X1:  dots[[2L]][[2L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 92716 
            Variance: 4635.8 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.59238       0.09418     TRUE
[b+c] = X2           11   0.54190      -0.01800     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 5`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[3L]], X = dots[[2L]][[3L]], ~., data = dots[[3L]][[3L]])

Explanatory tables:
X1:  dots[[2L]][[3L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 69095 
            Variance: 3838.6 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.29108       0.01841     TRUE
[b+c] = X2           12   0.71878       0.15634     TRUE
[a+b+c] = X1+X2      17   0.93010      -0.25814     TRUE
Individual fractions                                    
[a] = X1|X2           5                -0.41448     TRUE
[b]                   0                 0.43289    FALSE
[c] = X2|X1          12                -0.27655     TRUE
[d] = Residuals                         1.25814    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 6`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[4L]], X = dots[[2L]][[4L]], ~., data = dots[[3L]][[4L]])

Explanatory tables:
X1:  dots[[2L]][[4L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 41647 
            Variance: 4164.7 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.52075       0.04150     TRUE
[b+c] = X2            8   0.81424       0.07118     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           2                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           5                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 7`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[5L]], X = dots[[2L]][[5L]], ~., data = dots[[3L]][[5L]])

Explanatory tables:
X1:  dots[[2L]][[5L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 119166 
            Variance: 3611.1 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           16   0.56967       0.16465     TRUE
[b+c] = X2           17   0.52449       0.01925     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          16                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          17                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 8`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[6L]], X = dots[[2L]][[6L]], ~., data = dots[[3L]][[6L]])

Explanatory tables:
X1:  dots[[2L]][[6L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 77048 
            Variance: 3669 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           10   0.51081       0.06609     TRUE
[b+c] = X2            9   0.45616       0.04829     TRUE
[a+b+c] = X1+X2      19   0.91301       0.08661     TRUE
Individual fractions                                    
[a] = X1|X2          10                 0.03833     TRUE
[b]                   0                 0.02776    FALSE
[c] = X2|X1           9                 0.02053     TRUE
[d] = Residuals                         0.91339    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
[1] "Testing with RDA (full model) - non-core OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4541.3704     1.0000     
Constrained   2409.3978     0.5305    7
Unconstrained 2131.9726     0.4695    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7 
690.6 368.8 334.7 292.4 269.6 267.3 186.0 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
378.3 332.6 290.9 279.5 255.0 241.2 174.0 112.2  68.3 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4635.7929     1.0000     
Constrained   2512.1443     0.5419   11
Unconstrained 2123.6485     0.4581    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 
324.1 310.1 264.3 239.3 235.0 217.0 206.6 197.0 184.4 176.1 158.3 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
373.8 274.0 263.0 238.8 224.2 208.1 189.4 181.6 170.7 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear, data = data)

                Inertia Proportion Rank
Total         3838.6152     1.0000     
Constrained   2759.1254     0.7188   12
Unconstrained 1079.4898     0.2812    6
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
729.5 427.6 312.3 254.0 233.0 185.0 161.6 144.1 111.6  88.2  64.2  48.0 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6 
314.45 265.11 207.68 139.99  98.76  53.49 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4164.7180     1.0000     
Constrained   3391.0645     0.8142    8
Unconstrained  773.6535     0.1858    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8 
726.3 516.2 508.0 436.3 386.9 361.2 308.5 147.6 

Eigenvalues for unconstrained axes:
  PC1   PC2 
392.4 381.2 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3611.0934     1.0000     
Constrained   1893.9659     0.5245   17
Unconstrained 1717.1276     0.4755   16
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 RDA13 
316.3 192.1 154.2 136.3 120.4 117.5 111.5 101.7  97.1  89.9  86.7  82.4  76.7 
RDA14 RDA15 RDA16 RDA17 
 61.8  58.5  54.5  36.4 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12  PC13 
346.6 160.2 150.8 136.2 128.8 124.3  99.8  92.2  80.3  74.3  70.2  65.6  56.4 
 PC14  PC15  PC16 
 48.7  43.4  39.2 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3668.9698     1.0000     
Constrained   1673.6502     0.4562    9
Unconstrained 1995.3196     0.5438   12
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
371.0 253.5 197.5 179.3 172.5 137.7 130.2 119.0 113.0 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
318.8 263.3 222.4 184.4 173.0 166.6 150.2 125.0 114.4 109.9  95.6  71.6 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance     F Pr(>F)    
Model     7   2409.4 1.453  0.001 ***
Residual  9   2132.0                 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    11   2512.1 0.9679  0.775
Residual  9   2123.7              

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance     F Pr(>F)  
Model    12   2759.1 1.278  0.079 .
Residual  6   1079.5               
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 6`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     8   3391.1 1.0958   0.27
Residual  2    773.7              

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    17   1894.0 1.0381  0.363
Residual 16   1717.1              

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     9   1673.7 1.1184  0.105
Residual 12   1995.3              

$`Month 3`
$`Month 3`$r.squared
[1] 0.5305442

$`Month 3`$adj.r.squared
[1] 0.1654119


$`Month 4`
$`Month 4`$r.squared
[1] 0.5419018

$`Month 4`$adj.r.squared
[1] -0.01799607


$`Month 5`
$`Month 5`$r.squared
[1] 0.7187815

$`Month 5`$adj.r.squared
[1] 0.1563444


$`Month 6`
$`Month 6`$r.squared
[1] 0.8142363

$`Month 6`$adj.r.squared
[1] 0.0711814


$`Month 7`
$`Month 7`$r.squared
[1] 0.5244854

$`Month 7`$adj.r.squared
[1] 0.01925118


$`Month 8`
$`Month 8`$r.squared
[1] 0.4561635

$`Month 8`$adj.r.squared
[1] 0.04828618


[1] "Testing with partial RDA (fraction [a]) - non-core OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4.541e+03  1.000e+00     
Conditional   2.526e+03  5.562e-01    8
Constrained   1.656e+03  3.647e-01    6
Unconstrained 3.593e+02  7.911e-02    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6 
472.1 318.6 268.1 259.2 256.3  81.8 

Eigenvalues for unconstrained axes:
   PC1    PC2 
285.41  73.86 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4635.7929     1.0000     
Conditional   2746.1508     0.5924   11
Constrained   1889.6420     0.4076    9
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9 
273.35 265.65 242.37 219.46 210.86 197.28 180.73 162.16 137.78 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear + Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3838.6152     1.0000     
Conditional   1117.3278     0.2911    5
Constrained   2452.9815     0.6390   12
Unconstrained  268.3059     0.0699    1
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
587.2 403.3 286.0 260.4 193.6 160.8 135.2 120.9 103.9  98.6  74.0  28.9 

Eigenvalues for unconstrained axes:
   PC1 
268.31 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4164.7180     1.0000     
Conditional   2168.7854     0.5208    5
Constrained   1995.9326     0.4792    5
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5 
659.0 419.5 374.9 331.2 211.4 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3611.0934     1.0000     
Conditional   2057.1205     0.5697   16
Constrained   1553.9730     0.4303   17
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
203.54 177.13 136.94 126.34 115.57 113.85 108.00  91.10  82.25  78.97  68.30 
 RDA12  RDA13  RDA14  RDA15  RDA16  RDA17 
 57.42  51.14  47.90  35.15  31.48  28.91 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3.669e+03  1.000e+00     
Conditional   1.874e+03  5.108e-01   10
Constrained   1.476e+03  4.022e-01    9
Unconstrained 3.192e+02  8.699e-02    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
320.5 253.1 192.0 183.4 145.2 105.1  99.1  91.1  86.1 

Eigenvalues for unconstrained axes:
   PC1    PC2 
173.55 145.61 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     6  1656.07 1.5365  0.202
Residual  2   359.27              

$`Month 4`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     9   1889.6         
Residual  0      0.0         

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model    12  2452.98 0.7619  0.807
Residual  1   268.31              

$`Month 6`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     5   1995.9         
Residual  0      0.0         

$`Month 7`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model    17     1554         
Residual  0        0         

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     9  1475.67 1.0275  0.502
Residual  2   319.16              

$`Month 3`
$`Month 3`$r.squared
[1] 0.364664

$`Month 3`$adj.r.squared
[1] 0.2546635


$`Month 4`
$`Month 4`$r.squared
[1] 0.40762

$`Month 4`$adj.r.squared
[1] NA


$`Month 5`
$`Month 5`$r.squared
[1] 0.6390277

$`Month 5`$adj.r.squared
[1] -0.2765504


$`Month 6`
$`Month 6`$r.squared
[1] 0.479248

$`Month 6`$adj.r.squared
[1] NA


$`Month 7`
$`Month 7`$r.squared
[1] 0.4303331

$`Month 7`$adj.r.squared
[1] NA


$`Month 8`
$`Month 8`$r.squared
[1] 0.4022028

$`Month 8`$adj.r.squared
[1] 0.0205262


[1] "Spatial variables - non-core OTU"
Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  1.124505e-01
+ PCNM1          3.826928e-02
+ PCNM6          1.400091e-02
+ PCNM3          1.069107e-02
+ PCNM5          5.927412e-03
+ PCNM4          3.593913e-03
+ PCNM2          1.156769e-05
<none>           0.000000e+00
+ PCNM7         -2.438706e-03
+ PCNM8         -1.008183e-02

        Df    AIC      F Pr(>F)  
+ PCNM1  1 144.37 1.6367  0.016 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03826928 
Call: x ~ PCNM1 
 
                R2.adjusted
<All variables>  0.11245052
+ PCNM6          0.05600377
+ PCNM3          0.05245751
+ PCNM5          0.04735359
+ PCNM4          0.04485342
+ PCNM2          0.04101519
+ PCNM7          0.03838990
<none>           0.03826928
+ PCNM8          0.03020084

        Df    AIC      F Pr(>F)  
+ PCNM6  1 144.88 1.2818  0.066 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  9.417771e-02
+ PCNM4          1.877665e-02
+ PCNM1          1.596614e-02
+ PCNM2          8.495690e-03
+ PCNM9          5.422282e-03
+ PCNM10         3.872819e-03
+ PCNM11         1.660102e-03
+ PCNM3          1.474420e-03
<none>           0.000000e+00
+ PCNM7         -3.189612e-05
+ PCNM8         -1.169960e-03
+ PCNM5         -4.095317e-03
+ PCNM6         -5.760433e-03

        Df    AIC      F Pr(>F)   
+ PCNM4  1 178.77 1.3827   0.01 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.01877665 
Call: x ~ PCNM4 
 
                R2.adjusted
<All variables>  0.09417771
+ PCNM1          0.03667294
+ PCNM2          0.02878747
+ PCNM9          0.02554331
+ PCNM10         0.02390777
+ PCNM11         0.02157212
+ PCNM3          0.02137613
+ PCNM7          0.01978613
<none>           0.01877665
+ PCNM8          0.01858484
+ PCNM5          0.01549696
+ PCNM6          0.01373934

        Df    AIC     F Pr(>F)   
+ PCNM1  1 179.25 1.353  0.004 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03667294 
Call: x ~ PCNM4 + PCNM1 
 
                R2.adjusted
<All variables>  0.09417771
+ PCNM2          0.04832536
+ PCNM9          0.04489037
+ PCNM10         0.04315862
+ PCNM11         0.04068558
+ PCNM3          0.04047805
+ PCNM7          0.03879452
+ PCNM8          0.03752257
<none>           0.03667294
+ PCNM5          0.03425305
+ PCNM6          0.03239204

        Df    AIC      F Pr(>F)  
+ PCNM2  1 179.79 1.2204  0.036 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.04832536 
Call: x ~ PCNM4 + PCNM1 + PCNM2 
 
                R2.adjusted
<All variables>  0.09417771
+ PCNM9          0.05778465
+ PCNM10         0.05594466
+ PCNM11         0.05331706
+ PCNM3          0.05309656
+ PCNM7          0.05130781
+ PCNM8          0.04995636
<none>           0.04832536
+ PCNM5          0.04648250
+ PCNM6          0.04450518

        Df    AIC      F Pr(>F)
+ PCNM9  1 180.31 1.1707  0.166

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
+ PCNM3          0.0294603838
<All variables>  0.0184125607
<none>           0.0000000000
+ PCNM2         -0.0003199824
+ PCNM1         -0.0029403318
+ PCNM4         -0.0034716574
+ PCNM5         -0.0086482188

Step: R2.adj= 0 
Call: x ~ 1 
 
                R2.adjusted
<All variables>  0.04150409
+ PCNM5          0.02390744
+ PCNM4          0.01532721
+ PCNM2          0.01265896
<none>           0.00000000
+ PCNM3         -0.01256095
+ PCNM1         -0.01627484

        Df    AIC      F Pr(>F)
+ PCNM5  1 93.205 1.2449  0.178

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  1.646475e-01
+ PCNM3          3.639561e-02
+ PCNM1          2.692722e-02
+ PCNM12         2.143002e-02
+ PCNM15         1.552398e-02
+ PCNM7          7.137989e-03
+ PCNM6          4.522053e-03
+ PCNM2          3.429525e-03
+ PCNM8          3.178594e-03
+ PCNM4          1.693653e-05
<none>           0.000000e+00
+ PCNM10        -9.238474e-04
+ PCNM14        -1.085566e-03
+ PCNM5         -2.149141e-03
+ PCNM13        -3.798573e-03
+ PCNM16        -5.947155e-03
+ PCNM9         -8.206631e-03
+ PCNM11        -8.982015e-03

        Df   AIC      F Pr(>F)   
+ PCNM3  1 279.2 2.2464  0.002 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03639561 
Call: x ~ PCNM3 
 
                R2.adjusted
<All variables>  0.16464754
+ PCNM1          0.06536550
+ PCNM12         0.05969098
+ PCNM15         0.05359442
+ PCNM7          0.04493791
+ PCNM6          0.04223759
+ PCNM2          0.04110982
+ PCNM8          0.04085079
+ PCNM4          0.03758715
+ PCNM10         0.03661601
+ PCNM14         0.03644908
<none>           0.03639561
+ PCNM5          0.03535120
+ PCNM13         0.03364856
+ PCNM16         0.03143066
+ PCNM9          0.02909830
+ PCNM11         0.02829791

        Df    AIC      F Pr(>F)   
+ PCNM1  1 279.08 1.9919  0.002 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.0653655 
Call: x ~ PCNM3 + PCNM1 
 
                R2.adjusted
<All variables>  0.16464754
+ PCNM12         0.09040304
+ PCNM15         0.08410326
+ PCNM7          0.07515821
+ PCNM6          0.07236788
+ PCNM2          0.07120251
+ PCNM8          0.07093485
+ PCNM4          0.06756242
+ PCNM10         0.06655892
+ PCNM14         0.06638642
<none>           0.06536550
+ PCNM5          0.06525194
+ PCNM13         0.06349254
+ PCNM16         0.06120072
+ PCNM9          0.05879061
+ PCNM11         0.05796354

         Df    AIC      F Pr(>F)   
+ PCNM12  1 279.04 1.8533  0.002 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.09040304 
Call: x ~ PCNM3 + PCNM1 + PCNM12 
 
                R2.adjusted
<All variables>  0.16464754
+ PCNM15         0.11065030
+ PCNM7          0.10139679
+ PCNM6          0.09851024
+ PCNM2          0.09730469
+ PCNM8          0.09702780
+ PCNM4          0.09353908
+ PCNM10         0.09250097
+ PCNM14         0.09232252
+ PCNM5          0.09114893
<none>           0.09040304
+ PCNM13         0.08932886
+ PCNM16         0.08695801
+ PCNM9          0.08446480
+ PCNM11         0.08360920

         Df    AIC     F Pr(>F)  
+ PCNM15  1 279.12 1.683   0.02 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.1106503 
Call: x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 
 
                R2.adjusted
<All variables>   0.1646475
+ PCNM7           0.1227598
+ PCNM6           0.1197702
+ PCNM2           0.1185216
+ PCNM8           0.1182348
+ PCNM4           0.1146215
+ PCNM10          0.1135463
+ PCNM14          0.1133614
+ PCNM5           0.1121459
<none>            0.1106503
+ PCNM13          0.1102609
+ PCNM16          0.1078053
+ PCNM9           0.1052231
+ PCNM11          0.1043369

        Df    AIC      F Pr(>F)  
+ PCNM7  1 279.47 1.4003  0.058 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.0660882267
+ PCNM4          0.0190628833
+ PCNM2          0.0147232434
+ PCNM6          0.0125426103
+ PCNM1          0.0092195126
+ PCNM5          0.0049371932
+ PCNM3          0.0006878406
<none>           0.0000000000
+ PCNM8         -0.0015169854
+ PCNM9         -0.0041246410
+ PCNM7         -0.0067917897
+ PCNM10        -0.0123913427

        Df    AIC      F Pr(>F)  
+ PCNM4  1 182.05 1.4081  0.068 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 3`
Call: rda(formula = x ~ PCNM1, data = data)

                Inertia Proportion Rank
Total         4.541e+03  1.000e+00     
Constrained   4.468e+02  9.838e-02    1
Unconstrained 4.095e+03  9.016e-01   15
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1 
446.8 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12  PC13 
643.6 425.3 340.2 306.3 294.6 287.1 282.0 273.3 260.8 248.0 245.7 228.6 110.4 
 PC14  PC15 
 88.0  60.9 


$`Month 4`
Call: rda(formula = x ~ PCNM4 + PCNM1 + PCNM2, data = data)

                Inertia Proportion Rank
Total         4635.7929     1.0000     
Constrained    885.7913     0.1911    3
Unconstrained 3750.0015     0.8089   17
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3 
384.8 278.7 222.2 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
357.2 305.6 268.9 255.3 241.3 238.3 232.6 225.2 
(Showing 8 of 17 unconstrained eigenvalues)


$`Month 5`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3839     
Unconstrained    3839   18
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
765.1 460.8 337.1 327.9 293.4 251.0 231.1 227.1 
(Showing 8 of 18 unconstrained eigenvalues)


$`Month 6`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            4165     
Unconstrained    4165   10
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10 
776.6 558.1 534.8 445.3 409.3 380.8 365.1 333.3 246.7 114.7 


$`Month 7`
Call: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15, data = data)

                Inertia Proportion Rank
Total         3611.0934     1.0000     
Constrained    788.8443     0.2185    4
Unconstrained 2822.2491     0.7815   29
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4 
421.4 145.3 127.8  94.4 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 
266.25 205.67 169.91 162.14 152.62 148.67 133.21 128.55 
(Showing 8 of 29 unconstrained eigenvalues)


$`Month 8`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3669     
Unconstrained    3669   21
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
548.6 296.6 269.7 258.9 217.0 199.9 196.3 186.7 
(Showing 8 of 21 unconstrained eigenvalues)


[1] "Summary of spatial selection process - non-core OTU"
$`Month 3`
                  R2.adj Df    AIC      F Pr(>F)  
+ PCNM1         0.038269  1 144.37 1.6367  0.016 *
<All variables> 0.112451                          
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM4         0.018777  1 178.77 1.3827  0.010 **
+ PCNM1         0.036673  1 179.25 1.3530  0.004 **
+ PCNM2         0.048325  1 179.79 1.2204  0.036 * 
<All variables> 0.094178                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 5`
NULL

$`Month 6`
NULL

$`Month 7`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM3         0.036396  1 279.20 2.2464  0.002 **
+ PCNM1         0.065366  1 279.08 1.9919  0.002 **
+ PCNM12        0.090403  1 279.04 1.8533  0.002 **
+ PCNM15        0.110650  1 279.12 1.6830  0.020 * 
<All variables> 0.164648                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
NULL

[1] "ANOVA on full spatial selection - non-core OTU"
$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM1, data = data)
         Df Variance      F Pr(>F)   
Model     1    446.8 1.6367  0.006 **
Residual 15   4094.6                 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM4 + PCNM1 + PCNM2, data = data)
         Df Variance      F Pr(>F)    
Model     3    885.8 1.3385  0.001 ***
Residual 17   3750.0                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 5`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 18   3838.6          

$`Month 6`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 10   4164.7          

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15, data = data)
         Df Variance      F Pr(>F)    
Model     4   788.84 2.0264  0.001 ***
Residual 29  2822.25                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0        0  0       
Residual 21     3669          

[1] "Partition Bray-Curtis dissimilarities - non-core OTUs"
Warning messages:
1: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
2: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
3: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
4: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
5: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
6: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 4.9767 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            7   0.23228      -0.36483     TRUE
[b+c] = X2            8   0.14766      -0.70469     TRUE
[a+b+c] = X1+X2      14   0.55655      -2.54763     TRUE
Individual fractions                                    
[a] = X1|X2           6                -1.84294     TRUE
[b]                   0                 1.47812    FALSE
[c] = X2|X1           7                -2.18280     TRUE
[d] = Residuals                         3.54763    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 4`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 2.9902 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.59268       0.09484     TRUE
[b+c] = X2           11   0.66756       0.26125     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 5`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 23.553 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           12   0.32204      -1.03387     TRUE
[b+c] = X2            5   0.31460       0.05098     TRUE
[a+b+c] = X1+X2      17   0.99087       0.83568     TRUE
Individual fractions                                    
[a] = X1|X2          12                 0.78469     TRUE
[b]                   0                -1.81856    FALSE
[c] = X2|X1           5                 1.86955     TRUE
[d] = Residuals                         0.16432    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 6`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 8.654 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.78873      -0.05634     TRUE
[b+c] = X2            5   0.55798       0.11595     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           5                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           2                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 7`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 41.172 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           17   0.49526      -0.04103     TRUE
[b+c] = X2           16   0.44853      -0.07050     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          17                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          16                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 8`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 21.625 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            9   0.43982       0.01968     TRUE
[b+c] = X2           10   0.52656       0.09616     TRUE
[a+b+c] = X1+X2      19   0.93840       0.35316     TRUE
Individual fractions                                    
[a] = X1|X2           9                 0.25700     TRUE
[b]                   0                -0.23733    FALSE
[c] = X2|X1          10                 0.33348     TRUE
[d] = Residuals                         0.64684    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
Warning message:
In rm(abFrac, aFrac, abFrac0, pcnm_df, bcFrac, bcFrac0, step.space) :
  object 'abFrac0' not found
[1] "Analysis for All OTUs"
[1] "Variance partitioning - All OTUs"
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[1L]], X = dots[[2L]][[1L]], ~., data = dots[[3L]][[1L]])

Explanatory tables:
X1:  dots[[2L]][[1L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 73269 
            Variance: 4579.3 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.55612       0.11224     TRUE
[b+c] = X2            7   0.53099       0.16621     TRUE
[a+b+c] = X1+X2      14   0.92003       0.36027     TRUE
Individual fractions                                    
[a] = X1|X2           7                 0.19406     TRUE
[b]                   0                -0.08182    FALSE
[c] = X2|X1           6                 0.24803     TRUE
[d] = Residuals                         0.63973    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 4`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[2L]], X = dots[[2L]][[2L]], ~., data = dots[[3L]][[2L]])

Explanatory tables:
X1:  dots[[2L]][[2L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 93330 
            Variance: 4666.5 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.59208       0.09350     TRUE
[b+c] = X2           11   0.54175      -0.01833     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 5`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[3L]], X = dots[[2L]][[3L]], ~., data = dots[[3L]][[3L]])

Explanatory tables:
X1:  dots[[2L]][[3L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 69679 
            Variance: 3871.1 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.29072       0.01793     TRUE
[b+c] = X2           12   0.71941       0.15824     TRUE
[a+b+c] = X1+X2      17   0.93027      -0.25520     TRUE
Individual fractions                                    
[a] = X1|X2           5                -0.41343     TRUE
[b]                   0                 0.43136    FALSE
[c] = X2|X1          12                -0.27312     TRUE
[d] = Residuals                         1.25520    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 6`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[4L]], X = dots[[2L]][[4L]], ~., data = dots[[3L]][[4L]])

Explanatory tables:
X1:  dots[[2L]][[4L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 41860 
            Variance: 4186 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.52037       0.04074     TRUE
[b+c] = X2            8   0.81455       0.07274     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           2                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           5                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 7`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[5L]], X = dots[[2L]][[5L]], ~., data = dots[[3L]][[5L]])

Explanatory tables:
X1:  dots[[2L]][[5L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 119918 
            Variance: 3633.9 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           16   0.56926       0.16387     TRUE
[b+c] = X2           17   0.52493       0.02017     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          16                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          17                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 8`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[6L]], X = dots[[2L]][[6L]], ~., data = dots[[3L]][[6L]])

Explanatory tables:
X1:  dots[[2L]][[6L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 77483 
            Variance: 3689.7 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           10   0.51065       0.06578     TRUE
[b+c] = X2            9   0.45617       0.04830     TRUE
[a+b+c] = X1+X2      19   0.91294       0.08584     TRUE
Individual fractions                                    
[a] = X1|X2          10                 0.03754     TRUE
[b]                   0                 0.02824    FALSE
[c] = X2|X1           9                 0.02006     TRUE
[d] = Residuals                         0.91416    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
[1] "Testing with RDA (full model) - all OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

               Inertia Proportion Rank
Total         4579.326      1.000     
Constrained   2431.596      0.531    7
Unconstrained 2147.729      0.469    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7 
702.4 369.7 338.1 293.6 271.3 269.2 187.2 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
381.6 334.9 293.3 280.7 256.4 244.2 174.8 113.1  68.8 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4666.4799     1.0000     
Constrained   2528.0730     0.5418   11
Unconstrained 2138.4068     0.4582    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 
327.6 311.9 265.4 241.2 235.6 218.4 207.4 198.2 185.5 177.7 159.0 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
375.5 276.5 264.4 240.5 226.2 209.3 190.8 183.3 172.0 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear, data = data)

                Inertia Proportion Rank
Total         3871.0677     1.0000     
Constrained   2784.8924     0.7194   12
Unconstrained 1086.1753     0.2806    6
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
738.8 431.9 314.5 257.1 233.5 186.1 162.4 145.7 112.0  89.5  64.8  48.6 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6 
315.99 266.38 208.93 140.87  99.58  54.43 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4186.0472     1.0000     
Constrained   3409.7378     0.8145    8
Unconstrained  776.3095     0.1855    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8 
729.9 517.9 510.3 439.2 388.4 363.1 311.8 149.2 

Eigenvalues for unconstrained axes:
  PC1   PC2 
394.1 382.2 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3633.8848     1.0000     
Constrained   1907.5342     0.5249   17
Unconstrained 1726.3506     0.4751   16
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 RDA13 
317.9 192.8 155.1 137.5 120.5 118.6 112.4 102.7  97.7  90.6  87.7  82.9  77.7 
RDA14 RDA15 RDA16 RDA17 
 62.1  59.4  55.1  36.8 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12  PC13 
348.2 161.0 151.5 136.4 129.3 124.9 100.6  93.3  80.8  75.0  70.8  65.7  56.6 
 PC14  PC15  PC16 
 49.0  43.7  39.5 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3689.6784     1.0000     
Constrained   1683.1234     0.4562    9
Unconstrained 2006.5550     0.5438   12
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
372.1 256.4 198.2 180.1 173.5 138.8 131.0 119.5 113.6 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
321.0 264.8 224.3 185.5 173.8 167.6 150.6 125.4 114.7 110.6  96.4  71.9 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)    
Model     7   2431.6 1.4556  0.001 ***
Residual  9   2147.7                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    11   2528.1 0.9673  0.781
Residual  9   2138.4              

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance     F Pr(>F)  
Model    12   2784.9 1.282  0.052 .
Residual  6   1086.2               
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 6`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     8   3409.7 1.0981  0.254
Residual  2    776.3              

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance    F Pr(>F)
Model    17   1907.5 1.04  0.348
Residual 16   1726.3            

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     9   1683.1 1.1184  0.145
Residual 12   2006.6              

$`Month 3`
$`Month 3`$r.squared
[1] 0.5309944

$`Month 3`$adj.r.squared
[1] 0.1662123


$`Month 4`
$`Month 4`$r.squared
[1] 0.5417516

$`Month 4`$adj.r.squared
[1] -0.01832974


$`Month 5`
$`Month 5`$r.squared
[1] 0.719412

$`Month 5`$adj.r.squared
[1] 0.1582359


$`Month 6`
$`Month 6`$r.squared
[1] 0.8145483

$`Month 6`$adj.r.squared
[1] 0.07274164


$`Month 7`
$`Month 7`$r.squared
[1] 0.5249297

$`Month 7`$adj.r.squared
[1] 0.02016759


$`Month 8`
$`Month 8`$r.squared
[1] 0.4561708

$`Month 8`$adj.r.squared
[1] 0.04829882


[1] "Testing with partial RDA (fraction [a]) - all OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4.579e+03  1.000e+00     
Conditional   2.547e+03  5.561e-01    8
Constrained   1.666e+03  3.639e-01    6
Unconstrained 3.662e+02  7.997e-02    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6 
476.2 319.8 270.1 260.0 257.0  83.4 

Eigenvalues for unconstrained axes:
   PC1    PC2 
291.87  74.32 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4666.4799     1.0000     
Conditional   2762.9067     0.5921   11
Constrained   1903.5732     0.4079    9
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9 
276.45 267.51 243.33 220.33 212.19 199.98 181.77 163.11 138.90 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear + Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3.871e+03  1.000e+00     
Conditional   1.125e+03  2.907e-01    5
Constrained   2.476e+03  6.395e-01   12
Unconstrained 2.699e+02  6.973e-02    1
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
596.0 407.4 287.4 262.3 194.6 161.9 136.2 121.6 104.7  99.3  74.9  29.3 

Eigenvalues for unconstrained axes:
   PC1 
269.94 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4186.0472     1.0000     
Conditional   2178.2934     0.5204    5
Constrained   2007.7538     0.4796    5
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5 
662.5 420.5 377.2 333.9 213.6 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3633.8848     1.0000     
Conditional   2068.6428     0.5693   16
Constrained   1565.2419     0.4307   17
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
204.14 179.31 137.70 127.08 116.94 114.66 108.33  92.11  82.73  79.66  68.54 
 RDA12  RDA13  RDA14  RDA15  RDA16  RDA17 
 57.69  51.45  48.13  35.73  31.80  29.23 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3.690e+03  1.000e+00     
Conditional   1.884e+03  5.107e-01   10
Constrained   1.484e+03  4.023e-01    9
Unconstrained 3.212e+02  8.706e-02    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
321.7 253.9 193.2 185.7 146.0 105.8  99.9  91.3  86.7 

Eigenvalues for unconstrained axes:
   PC1    PC2 
174.64 146.59 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     6  1666.48 1.5169  0.196
Residual  2   366.19              

$`Month 4`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     9   1903.6         
Residual  0      0.0         

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model    12  2475.71 0.7643  0.796
Residual  1   269.94              

$`Month 6`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     5   2007.8         
Residual  0      0.0         

$`Month 7`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model    17   1565.2         
Residual  0      0.0         

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     9  1484.32 1.0268    0.5
Residual  2   321.23              

$`Month 3`
$`Month 3`$r.squared
[1] 0.3639136

$`Month 3`$adj.r.squared
[1] 0.2480305


$`Month 4`
$`Month 4`$r.squared
[1] 0.4079249

$`Month 4`$adj.r.squared
[1] NA


$`Month 5`
$`Month 5`$r.squared
[1] 0.6395422

$`Month 5`$adj.r.squared
[1] -0.2731223


$`Month 6`
$`Month 6`$r.squared
[1] 0.47963

$`Month 6`$adj.r.squared
[1] NA


$`Month 7`
$`Month 7`$r.squared
[1] 0.4307352

$`Month 7`$adj.r.squared
[1] NA


$`Month 8`
$`Month 8`$r.squared
[1] 0.4022899

$`Month 8`$adj.r.squared
[1] 0.02006033


[1] "Forward selection for parsimonious model - all OTUs"
[1] "Spatial variables - all OTU"
Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  1.122406e-01
+ PCNM1          3.887950e-02
+ PCNM6          1.376787e-02
+ PCNM3          1.068361e-02
+ PCNM5          5.579341e-03
+ PCNM4          3.615385e-03
+ PCNM2          2.385579e-05
<none>           0.000000e+00
+ PCNM7         -2.697265e-03
+ PCNM8         -9.990662e-03

        Df   AIC      F Pr(>F)   
+ PCNM1  1 144.5 1.6472  0.008 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.0388795 
Call: x ~ PCNM1 
 
                R2.adjusted
<All variables>  0.11224056
+ PCNM6          0.05640789
+ PCNM3          0.05310333
+ PCNM5          0.04763447
+ PCNM4          0.04553023
+ PCNM2          0.04168217
<none>           0.03887950
+ PCNM7          0.03876668
+ PCNM8          0.03095233

        Df    AIC      F Pr(>F)  
+ PCNM6  1 145.01 1.2786  0.088 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  9.350030e-02
+ PCNM4          1.860456e-02
+ PCNM1          1.620305e-02
+ PCNM2          8.261223e-03
+ PCNM9          5.362398e-03
+ PCNM10         3.922854e-03
+ PCNM11         1.631505e-03
+ PCNM3          1.211986e-03
+ PCNM7          3.734544e-05
<none>           0.000000e+00
+ PCNM8         -1.331243e-03
+ PCNM5         -3.804266e-03
+ PCNM6         -5.809799e-03

        Df    AIC      F Pr(>F)   
+ PCNM4  1 178.91 1.3791  0.006 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.01860456 
Call: x ~ PCNM4 
 
                R2.adjusted
<All variables>  0.09350030
+ PCNM1          0.03674137
+ PCNM2          0.02835833
+ PCNM9          0.02529846
+ PCNM10         0.02377894
+ PCNM11         0.02136030
+ PCNM3          0.02091747
+ PCNM7          0.01967757
<none>           0.01860456
+ PCNM8          0.01823295
+ PCNM5          0.01562254
+ PCNM6          0.01350559

        Df    AIC      F Pr(>F)   
+ PCNM1  1 179.39 1.3577  0.002 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03674137 
Call: x ~ PCNM4 + PCNM1 
 
                R2.adjusted
<All variables>  0.09350030
+ PCNM2          0.04813575
+ PCNM9          0.04489589
+ PCNM10         0.04328699
+ PCNM11         0.04072607
+ PCNM3          0.04025720
+ PCNM7          0.03894436
+ PCNM8          0.03741476
<none>           0.03674137
+ PCNM5          0.03465080
+ PCNM6          0.03240932

        Df    AIC      F Pr(>F)  
+ PCNM2  1 179.94 1.2155  0.052 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
+ PCNM3          0.0293144184
<All variables>  0.0179265290
<none>           0.0000000000
+ PCNM2         -0.0003257545
+ PCNM1         -0.0030551293
+ PCNM4         -0.0035203640
+ PCNM5         -0.0087046484

Step: R2.adj= 0 
Call: x ~ 1 
 
                R2.adjusted
<All variables>  0.04074002
+ PCNM5          0.02351246
+ PCNM4          0.01567226
+ PCNM2          0.01264249
<none>           0.00000000
+ PCNM3         -0.01254662
+ PCNM1         -0.01664725

        Df    AIC      F Pr(>F)
+ PCNM5  1 93.266 1.2408  0.216

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  1.638670e-01
+ PCNM3          3.658131e-02
+ PCNM1          2.691667e-02
+ PCNM12         2.140828e-02
+ PCNM15         1.544116e-02
+ PCNM7          7.038207e-03
+ PCNM6          4.467816e-03
+ PCNM2          3.385334e-03
+ PCNM8          3.129966e-03
<none>           0.000000e+00
+ PCNM4         -4.459353e-05
+ PCNM10        -1.026609e-03
+ PCNM14        -1.167639e-03
+ PCNM5         -2.214187e-03
+ PCNM13        -3.779880e-03
+ PCNM16        -5.961513e-03
+ PCNM9         -8.161063e-03
+ PCNM11        -8.958883e-03

        Df    AIC     F Pr(>F)   
+ PCNM3  1 279.41 2.253  0.002 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03658131 
Call: x ~ PCNM3 
 
                R2.adjusted
<All variables>  0.16386704
+ PCNM1          0.06554630
+ PCNM12         0.05986022
+ PCNM15         0.05370061
+ PCNM7          0.04502660
+ PCNM6          0.04237329
+ PCNM2          0.04125589
+ PCNM8          0.04099228
+ PCNM4          0.03771532
+ PCNM10         0.03670162
<none>           0.03658131
+ PCNM14         0.03655604
+ PCNM5          0.03547574
+ PCNM13         0.03385954
+ PCNM16         0.03160753
+ PCNM9          0.02933703
+ PCNM11         0.02851347

        Df    AIC      F Pr(>F)   
+ PCNM1  1 279.29 1.9919  0.002 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.0655463 
Call: x ~ PCNM3 + PCNM1 
 
                R2.adjusted
<All variables>  0.16386704
+ PCNM12         0.09056667
+ PCNM15         0.08420174
+ PCNM7          0.07523860
+ PCNM6          0.07249685
+ PCNM2          0.07134220
+ PCNM8          0.07106981
+ PCNM4          0.06768361
+ PCNM10         0.06663613
+ PCNM14         0.06648569
<none>           0.06554630
+ PCNM5          0.06536938
+ PCNM13         0.06369930
+ PCNM16         0.06137223
+ PCNM9          0.05902604
+ PCNM11         0.05817503

         Df    AIC      F Pr(>F)   
+ PCNM12  1 279.25 1.8529  0.004 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.09056667 
Call: x ~ PCNM3 + PCNM1 + PCNM12 
 
                R2.adjusted
<All variables>  0.16386704
+ PCNM15         0.11072818
+ PCNM7          0.10145596
+ PCNM6          0.09861966
+ PCNM2          0.09742520
+ PCNM8          0.09714342
+ PCNM4          0.09364045
+ PCNM10         0.09255685
+ PCNM14         0.09240123
+ PCNM5          0.09124642
<none>           0.09056667
+ PCNM13         0.08951876
+ PCNM16         0.08711144
+ PCNM9          0.08468435
+ PCNM11         0.08380400

         Df    AIC      F Pr(>F)  
+ PCNM15  1 279.34 1.6802   0.02 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.1107282 
Call: x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 
 
                R2.adjusted
<All variables>   0.1638670
+ PCNM7           0.1227264
+ PCNM6           0.1197888
+ PCNM2           0.1185517
+ PCNM8           0.1182599
+ PCNM4           0.1146318
+ PCNM10          0.1135095
+ PCNM14          0.1133483
+ PCNM5           0.1121523
<none>            0.1107282
+ PCNM13          0.1103629
+ PCNM16          0.1078696
+ PCNM9           0.1053558
+ PCNM11          0.1044440

        Df    AIC      F Pr(>F)  
+ PCNM7  1 279.68 1.3966  0.036 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.1227264 
Call: x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 + PCNM7 
 
                R2.adjusted
<All variables>   0.1638670
+ PCNM6           0.1325670
+ PCNM2           0.1312841
+ PCNM8           0.1309814
+ PCNM4           0.1272190
+ PCNM10          0.1260551
+ PCNM14          0.1258880
+ PCNM5           0.1246476
+ PCNM13          0.1227920
<none>            0.1227264
+ PCNM16          0.1202063
+ PCNM9           0.1175995
+ PCNM11          0.1166539

        Df    AIC      F Pr(>F)  
+ PCNM6  1 280.06 1.3176   0.05 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.132567 
Call: x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 + PCNM7 + PCNM6 
 
                R2.adjusted
<All variables>   0.1638670
+ PCNM2           0.1418323
+ PCNM8           0.1415180
+ PCNM4           0.1376109
+ PCNM10          0.1364022
+ PCNM14          0.1362287
+ PCNM5           0.1349406
+ PCNM13          0.1330136
<none>            0.1325670
+ PCNM16          0.1303285
+ PCNM9           0.1276214
+ PCNM11          0.1266394

        Df    AIC      F Pr(>F)  
+ PCNM2  1 280.41 1.2915   0.07 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.0657814451
+ PCNM4          0.0190571989
+ PCNM2          0.0147303603
+ PCNM6          0.0124961039
+ PCNM1          0.0092890731
+ PCNM5          0.0048034657
+ PCNM3          0.0006040269
<none>           0.0000000000
+ PCNM8         -0.0014143245
+ PCNM9         -0.0040833698
+ PCNM7         -0.0068622960
+ PCNM10        -0.0124404435

        Df    AIC     F Pr(>F)  
+ PCNM4  1 182.17 1.408  0.094 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 3`
Call: rda(formula = x ~ PCNM1, data = data)

                Inertia Proportion Rank
Total         4.579e+03  1.000e+00     
Constrained   4.531e+02  9.895e-02    1
Unconstrained 4.126e+03  9.011e-01   15
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1 
453.1 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12  PC13 
650.4 427.4 342.7 311.5 296.1 289.8 283.4 274.6 261.8 248.4 247.4 231.2 111.1 
 PC14  PC15 
 88.8  61.7 


$`Month 4`
Call: rda(formula = x ~ PCNM4 + PCNM1, data = data)

                Inertia Proportion Rank
Total         4666.4799     1.0000     
Constrained    620.9555     0.1331    2
Unconstrained 4045.5243     0.8669   18
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1  RDA2 
342.8 278.1 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
365.1 328.5 282.2 270.8 251.7 242.0 234.4 233.2 
(Showing 8 of 18 unconstrained eigenvalues)


$`Month 5`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3871     
Unconstrained    3871   18
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
773.3 466.1 342.6 330.0 294.3 251.8 231.9 227.4 
(Showing 8 of 18 unconstrained eigenvalues)


$`Month 6`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            4186     
Unconstrained    4186   10
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10 
780.2 561.0 536.6 447.6 410.8 382.5 367.3 334.5 249.4 116.0 


$`Month 7`
Call: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 + PCNM7 +
PCNM6, data = data)

                Inertia Proportion Rank
Total         3633.8848     1.0000     
Constrained   1054.8518     0.2903    6
Unconstrained 2579.0330     0.7097   27
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6 
436.2 163.7 142.0 118.2 109.2  85.5 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 
251.30 195.66 165.33 156.92 150.10 136.62 133.28 125.43 
(Showing 8 of 27 unconstrained eigenvalues)


$`Month 8`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3690     
Unconstrained    3690   21
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
550.4 298.2 271.7 260.3 219.3 200.8 197.1 188.2 
(Showing 8 of 21 unconstrained eigenvalues)


[1] "Summary of spatial selection process - all OTU"
$`Month 3`
                  R2.adj Df   AIC      F Pr(>F)   
+ PCNM1         0.038879  1 144.5 1.6472  0.008 **
<All variables> 0.112241                          
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM4         0.018605  1 178.91 1.3791  0.006 **
+ PCNM1         0.036741  1 179.39 1.3577  0.002 **
<All variables> 0.093500                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 5`
NULL

$`Month 6`
NULL

$`Month 7`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM3         0.036581  1 279.41 2.2530  0.002 **
+ PCNM1         0.065546  1 279.29 1.9919  0.002 **
+ PCNM12        0.090567  1 279.25 1.8529  0.004 **
+ PCNM15        0.110728  1 279.34 1.6802  0.020 * 
+ PCNM7         0.122726  1 279.68 1.3966  0.036 * 
+ PCNM6         0.132567  1 280.06 1.3176  0.050 * 
<All variables> 0.163867                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
NULL

[1] "ANOVA on full spatial selection - all OTU"
$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM1, data = data)
         Df Variance      F Pr(>F)   
Model     1    453.1 1.6472  0.006 **
Residual 15   4126.2                 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM4 + PCNM1, data = data)
         Df Variance      F Pr(>F)    
Model     2    621.0 1.3814  0.001 ***
Residual 18   4045.5                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 5`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 18   3871.1          

$`Month 6`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0        0  0       
Residual 10     4186          

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 + PCNM7 + PCNM6, data = data)
         Df Variance      F Pr(>F)    
Model     6   1054.8 1.8405  0.001 ***
Residual 27   2579.0                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 21   3689.7          

[1] "Partition Bray-Curtis dissimilarities - all OTUs"
Warning messages:
1: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
2: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
3: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
4: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
5: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
6: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 4.9376 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            7   0.23666      -0.35706     TRUE
[b+c] = X2            8   0.15204      -0.69592     TRUE
[a+b+c] = X1+X2      14   0.55621      -2.55029     TRUE
Individual fractions                                    
[a] = X1|X2           6                -1.85437     TRUE
[b]                   0                 1.49732    FALSE
[c] = X2|X1           7                -2.19324     TRUE
[d] = Residuals                         3.55029    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 4`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 2.9761 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.59182       0.09293     TRUE
[b+c] = X2           11   0.66798       0.26218     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 5`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 22.225 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           12   0.33961      -0.98118     TRUE
[b+c] = X2            5   0.32983       0.07207     TRUE
[a+b+c] = X1+X2      17   0.99042       0.82762     TRUE
Individual fractions                                    
[a] = X1|X2          12                 0.75555     TRUE
[b]                   0                -1.73673    FALSE
[c] = X2|X1           5                 1.80880     TRUE
[d] = Residuals                         0.17238    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 6`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 8.3746 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.78949      -0.05257     TRUE
[b+c] = X2            5   0.55108       0.10217     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           5                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           2                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 7`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 39.557 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           17   0.49694      -0.03756     TRUE
[b+c] = X2           16   0.45187      -0.06402     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          17                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          16                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 8`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 21.097 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            9   0.43984       0.01972     TRUE
[b+c] = X2           10   0.52669       0.09641     TRUE
[a+b+c] = X1+X2      19   0.93862       0.35546     TRUE
Individual fractions                                    
[a] = X1|X2           9                 0.25905     TRUE
[b]                   0                -0.23933    FALSE
[c] = X2|X1          10                 0.33574     TRUE
[d] = Residuals                         0.64454    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
Warning message:
In rm(abFrac, aFrac, abFrac0, pcnm_df, bcFrac, bcFrac0, step.space) :
  object 'abFrac0' not found
