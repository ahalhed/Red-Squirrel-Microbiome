Unloading StdEnv/2020

The following have been reloaded with a version change:
  1) gcc/9.3.0 => gcc/7.3.0                 4) java/13.0.2 => java/1.8.0_192
  2) gcccore/.9.3.0 => gcccore/.7.3.0       5) r/4.0.2 => r/3.6.0
  3) imkl/2020.1.217 => imkl/2018.3.222

[1] "Set up (working directory, theme, and packages)"
Loading required package: permute
Loading required package: lattice
This is vegan 2.5-6
Loading required package: MASS
Loading required package: NADA
Loading required package: survival

Attaching package: ‘NADA’

The following object is masked from ‘package:stats’:

    cor

Loading required package: truncnorm
Loading required package: ALDEx2
Loading required package: car
Loading required package: carData
── Attaching packages ─────────────────────────────────────── tidyverse 1.3.0 ──
✔ ggplot2 3.3.2     ✔ purrr   0.3.4
✔ tibble  3.0.1     ✔ dplyr   1.0.0
✔ tidyr   1.1.0     ✔ stringr 1.4.0
✔ readr   1.3.1     ✔ forcats 0.5.0
── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──
✖ dplyr::filter() masks stats::filter()
✖ dplyr::lag()    masks stats::lag()
✖ dplyr::recode() masks car::recode()
✖ dplyr::select() masks MASS::select()
✖ purrr::some()   masks car::some()
[1] "Initiate functions for analysis"
[1] "Read in the Data"
[1] "Building phyloseq object"
[1] "Read in the metadata"
[1] "Aitchison transformation"
No. corrected values:  19086552 
[1] "Extract Core"
[1] "Subset the OTU table to find core and non-core OTUs"
[1] "Accessing the XY data by month"
[1] "Months in this Grid"
[1] 4 3 5 7 6 8
[1] "Computing Euclidean Distances"
[1] "Maximum Euclidean Distance by Month"
$`Month 3`
[1] 21.47673

$`Month 4`
[1] 23.08679

$`Month 5`
[1] 21.36001

$`Month 6`
[1] 21.47673

$`Month 7`
[1] 23.85372

$`Month 8`
[1] 24.59675

Warning message:
`summarise_each_()` is deprecated as of dplyr 0.7.0.
Please use `across()` instead.
This warning is displayed once every 8 hours.
Call `lifecycle::last_warnings()` to see where this warning was generated. 
[1] "Build the community object (OTU table) for grid/year/month"
[1] "Extract metadata for grid/year/month"
[1] "Removing pobjects that are no longer needed"
[1] "Unweighted PCNM - for use with all OTU tables"
                              PCNM1       PCNM2       PCNM3        PCNM4
A0174.10342.F.2.KL.2009 -0.14696657 -0.10076199 -0.07103571 -0.053912894
A0910.10181.F.4.KL.2009 -0.15177359 -0.09586635 -0.06549778 -0.060739346
A0970.11176.F.1.KL.2009 -0.15177359 -0.09586635 -0.06549778 -0.060739346
A0579.11176.F.1.KL.2009 -0.15177359 -0.09586635 -0.06549778 -0.060739346
A0094.10517.F.2.KL.2009 -0.22386137  0.17063076  0.28753214 -0.016919810
A0014.11176.F.1.KL.2009 -0.15101039 -0.09807278 -0.06732452 -0.057813241
A0106.10408.F.2.KL.2009  0.09575580 -0.34890973 -0.41480817  0.433830920
A0245.8815.F.3.KL.2009  -0.08839041  0.08116391 -0.23844211 -0.279604044
A0201.10131.F.4.KL.2009 -0.21847628  0.17353660  0.29383218 -0.001695139
A0045.10265.F.4.KL.2009 -0.22131614  0.17060713  0.28409348 -0.031677473
A0007.10754.F.1.KL.2009  0.32563840  0.48932357 -0.18357877  0.187353448
A0227.10182.F.4.KL.2009  0.30690948  0.51629911 -0.32193951 -0.177917984
A0034.10375.F.2.KL.2009 -0.20427738  0.05118117  0.04248857  0.531331999
A0787.11176.F.1.KL.2009 -0.15177359 -0.09586635 -0.06549778 -0.060739346
A0308.11171.F.1.KL.2009  0.43670737 -0.10103372  0.51422187 -0.187750954
A0119.10183.F.4.KL.2009  0.23751813 -0.39818743 -0.13359639 -0.452234770
A0260.10137.F.4.KL.2009  0.45886371 -0.22231118  0.27054804  0.349967324
                              PCNM5         PCNM6         PCNM7         PCNM8
A0174.10342.F.2.KL.2009  0.13554381  0.5582122456 -0.1491635591  0.4854916358
A0910.10181.F.4.KL.2009  0.11473071 -0.1730480736  0.0318770436 -0.1403579425
A0970.11176.F.1.KL.2009  0.11473071 -0.1730480736  0.0318770436 -0.1403579425
A0579.11176.F.1.KL.2009  0.11473071 -0.1730480736  0.0318770436 -0.1403579425
A0094.10517.F.2.KL.2009 -0.01932752  0.1002579381 -0.0411419507  0.4432185238
A0014.11176.F.1.KL.2009  0.12249504  0.1350112996  0.0088238643  0.0592566297
A0106.10408.F.2.KL.2009 -0.10387579 -0.0125344019  0.0019037508 -0.0026566440
A0245.8815.F.3.KL.2009  -0.52980762  0.0002544761  0.0002116894 -0.0001273663
A0201.10131.F.4.KL.2009 -0.02311182  0.3249325636  0.6490871004 -0.3643912324
A0045.10265.F.4.KL.2009 -0.02820139 -0.5895756706 -0.1829464622  0.2436073421
A0007.10754.F.1.KL.2009  0.61669977 -0.0223473026  0.0041167302 -0.0023539926
A0227.10182.F.4.KL.2009 -0.36331572  0.0222688668 -0.0034606827  0.0012483306
A0034.10375.F.2.KL.2009 -0.18763263  0.1693034765 -0.4153943200 -0.3018958451
A0787.11176.F.1.KL.2009  0.11473071 -0.1730480736  0.0318770436 -0.1403579425
A0308.11171.F.1.KL.2009 -0.03439538  0.1662166050 -0.4236152546 -0.3167818530
A0119.10183.F.4.KL.2009  0.16655997  0.0121363738  0.0181557732 -0.0024095792
A0260.10137.F.4.KL.2009 -0.21055356 -0.1719441754  0.4059151467  0.3192258208
                              PCNM1       PCNM2       PCNM3       PCNM4
A0439.11177.F.1.KL.2009 -0.16844796 -0.19502592  0.15281636 -0.20687202
A0021.10265.F.4.KL.2009 -0.25531876  0.07980803  0.05413607  0.20029813
A0680.11176.F.1.KL.2009 -0.15191079 -0.10134127 -0.08158452 -0.20335426
A0455.10137.F.4.KL.2009  0.31035910 -0.02059411 -0.08340818  0.28533493
A0671.11489.F.2.KL.2009 -0.22020051  0.10830396  0.56565764 -0.23470547
A0711.10517.F.2.KL.2009 -0.25597996  0.07112727  0.06407647  0.19382234
A0460.10342.F.2.KL.2009 -0.12680010 -0.23124594  0.10562178 -0.23789812
A0382.10137.F.4.KL.2009  0.33735767  0.15828567  0.17997442  0.09847067
A0317.10342.F.2.KL.2009 -0.08205478 -0.23803480  0.06082424 -0.03097923
A0411.10145.F.4.KL.2009  0.01958382  0.45829643 -0.28560150 -0.53670144
A0423.10342.F.2.KL.2009  0.04865356 -0.18416670 -0.04200800  0.26726931
A0427.10318.F.3.KL.2009 -0.04808451 -0.26785140 -0.20667698  0.12810404
A0744.10462.F.1.KL.2009 -0.07363150 -0.13737055 -0.39782743  0.16588625
A0402.10391.F.2.KL.2009  0.30213093  0.27887081  0.27250679  0.11784738
A0454.10265.F.4.KL.2009 -0.25531876  0.07980803  0.05413607  0.20029813
A0694.10184.F.3.KL.2009  0.26923895 -0.11510489 -0.07696977 -0.03448454
A0644.10317.F.3.KL.2009  0.33355733  0.15688728  0.17660774  0.09351199
A0704.10140.F.4.KL.2009 -0.15985722  0.47713037 -0.40278932  0.03864138
A0354.10748.F.2.KL.2009  0.19397967 -0.26241240 -0.15294514 -0.29298149
A0498.10183.F.4.KL.2009  0.23872377 -0.18649715 -0.02062322 -0.20533032
A0365.10517.F.2.KL.2009 -0.25597996  0.07112727  0.06407647  0.19382234
                               PCNM5        PCNM6         PCNM7        PCNM8
A0439.11177.F.1.KL.2009 -0.237368693  0.145693517  0.5263434703 -0.084392711
A0021.10265.F.4.KL.2009 -0.038003029 -0.007114357 -0.0032908579  0.040836665
A0680.11176.F.1.KL.2009  0.064005821 -0.462233836 -0.0809313485 -0.208005209
A0455.10137.F.4.KL.2009  0.184888794  0.455942793 -0.0777821221 -0.266502190
A0671.11489.F.2.KL.2009  0.119769605  0.102152447 -0.2184542536 -0.255698122
A0711.10517.F.2.KL.2009 -0.036715000  0.007687546  0.0006366415  0.079698775
A0460.10342.F.2.KL.2009  0.077540395 -0.191664898 -0.1173467346  0.394928917
A0382.10137.F.4.KL.2009 -0.295432186 -0.097749191 -0.0620298141 -0.002258472
A0317.10342.F.2.KL.2009  0.250714223  0.329090995 -0.2481224777 -0.238638706
A0411.10145.F.4.KL.2009 -0.048054700  0.405667800 -0.0726101364  0.319869764
A0423.10342.F.2.KL.2009 -0.441911853  0.008944120 -0.1319691953  0.265345344
A0427.10318.F.3.KL.2009  0.146988298  0.213544800  0.1031630212  0.370570812
A0744.10462.F.1.KL.2009  0.128418843 -0.061870016  0.1385811456 -0.242465193
A0402.10391.F.2.KL.2009  0.413619997 -0.116324096  0.3663482059  0.114046590
A0454.10265.F.4.KL.2009 -0.038003029 -0.007114357 -0.0032908579  0.040836665
A0694.10184.F.3.KL.2009  0.332677997 -0.288590311 -0.3986194453  0.201460487
A0644.10317.F.3.KL.2009 -0.329072093 -0.085628117 -0.0734941758 -0.028953289
A0704.10140.F.4.KL.2009 -0.007400994 -0.240579881  0.0229788706 -0.250387385
A0354.10748.F.2.KL.2009 -0.306797084  0.008211601 -0.1334151622 -0.313043245
A0498.10183.F.4.KL.2009  0.096849686 -0.125754104  0.4626685848 -0.016948275
A0365.10517.F.2.KL.2009 -0.036715000  0.007687546  0.0006366415  0.079698775
                                PCNM9        PCNM10        PCNM11
A0439.11177.F.1.KL.2009  0.0126172369 -0.0007010929 -1.127195e-03
A0021.10265.F.4.KL.2009  0.0111990642  0.4812840622 -1.387988e-01
A0680.11176.F.1.KL.2009  0.0023014451 -0.1549549353 -4.767364e-01
A0455.10137.F.4.KL.2009  0.0005112037 -0.0107779343 -1.326078e-04
A0671.11489.F.2.KL.2009  0.0008639461 -0.0093200375  1.090017e-04
A0711.10517.F.2.KL.2009 -0.0144651119 -0.4773849716  1.387344e-01
A0460.10342.F.2.KL.2009 -0.0174261717  0.1545343074  4.765943e-01
A0382.10137.F.4.KL.2009  0.7063206992 -0.0242987702 -6.082223e-04
A0317.10342.F.2.KL.2009  0.0177736988  0.0174674257  1.090700e-03
A0411.10145.F.4.KL.2009  0.0087421321  0.0147608167 -3.091601e-04
A0423.10342.F.2.KL.2009  0.0276981409  0.0181120755 -2.829305e-03
A0427.10318.F.3.KL.2009 -0.0322018231 -0.1312654746 -4.835973e-01
A0744.10462.F.1.KL.2009  0.0037674937  0.1139467788  4.844006e-01
A0402.10391.F.2.KL.2009 -0.0190385261  0.0017111448  3.720705e-03
A0454.10265.F.4.KL.2009  0.0111990642  0.4812840622 -1.387988e-01
A0694.10184.F.3.KL.2009 -0.0010857099  0.0010411025 -2.885499e-04
A0644.10317.F.3.KL.2009 -0.7052528009  0.0142240267  3.948039e-04
A0704.10140.F.4.KL.2009  0.0001307734 -0.0142524818  7.491097e-05
A0354.10748.F.2.KL.2009 -0.0024594110 -0.0187064305  2.856077e-03
A0498.10183.F.4.KL.2009  0.0032697681  0.0206812977 -3.483375e-03
A0365.10517.F.2.KL.2009 -0.0144651119 -0.4773849716  1.387344e-01
                              PCNM1       PCNM2       PCNM3        PCNM4
A0896.11489.F.2.KL.2009 -0.09120194 -0.26721392  0.13031154  0.388724152
A0800.11177.F.1.KL.2009 -0.12792496  0.03343361 -0.15349781  0.222365413
A0784.10408.F.2.KL.2009 -0.08620589  0.50481682 -0.11780285  0.001303069
A0958.11176.F.1.KL.2009 -0.12366030  0.02238947 -0.19456054 -0.350316546
A0922.10265.F.4.KL.2009 -0.09085576 -0.27279989  0.09080224 -0.115182666
A0538.10145.F.4.KL.2009  0.49232860  0.06684045  0.12620698 -0.004921199
A0980.10342.F.2.KL.2009 -0.17248609  0.11552556  0.45972068  0.075874669
A0817.11171.F.1.KL.2009 -0.08620589  0.50481682 -0.11780285  0.001303069
A0937.10145.F.4.KL.2009  0.49232860  0.06684045  0.12620698 -0.004921199
A0978.10746.F.2.KL.2009 -0.08576498 -0.27111075  0.05844087 -0.571522753
A0626.10145.F.4.KL.2009  0.49232860  0.06684045  0.12620698 -0.004921199
A0909.11489.F.2.KL.2009 -0.09120194 -0.26721392  0.13031154  0.388724152
A0983.10177.M.4.KL.2009 -0.12792496  0.03343361 -0.15349781  0.222365413
A0841.10121.M.4.KL.2009 -0.12792496  0.03343361 -0.15349781  0.222365413
A0681.10121.M.4.KL.2009 -0.17162071  0.12553318  0.44581776 -0.158700283
A0555.10724.M.2.KL.2009  0.24911957 -0.27785270 -0.53662624  0.030877815
A0964.11176.F.1.KL.2009 -0.12522586  0.02079766 -0.18476261 -0.202253982
A0805.11176.F.1.KL.2009 -0.12704539  0.03428936 -0.17277931 -0.025980674
A0727.10265.F.4.KL.2009 -0.09085576 -0.27279989  0.09080224 -0.115182666
                                PCNM5
A0896.11489.F.2.KL.2009  0.1247563092
A0800.11177.F.1.KL.2009 -0.1474861121
A0784.10408.F.2.KL.2009  0.0083221810
A0958.11176.F.1.KL.2009  0.3113981330
A0922.10265.F.4.KL.2009 -0.0488705365
A0538.10145.F.4.KL.2009  0.0007117051
A0980.10342.F.2.KL.2009  0.4270357064
A0817.11171.F.1.KL.2009  0.0083221810
A0937.10145.F.4.KL.2009  0.0007117051
A0978.10746.F.2.KL.2009 -0.1626824637
A0626.10145.F.4.KL.2009  0.0007117051
A0909.11489.F.2.KL.2009  0.1247563092
A0983.10177.M.4.KL.2009 -0.1474861121
A0841.10121.M.4.KL.2009 -0.1474861121
A0681.10121.M.4.KL.2009 -0.4285686618
A0555.10724.M.2.KL.2009 -0.0073616203
A0964.11176.F.1.KL.2009  0.5135115555
A0805.11176.F.1.KL.2009 -0.3814253354
A0727.10265.F.4.KL.2009 -0.0488705365
                              PCNM1       PCNM2        PCNM3       PCNM4
A0572.11489.F.2.KL.2009 -0.37533875  0.04879990 -0.489092474  0.09802188
A0828.11176.F.1.KL.2009 -0.05193083  0.23043278  0.017786700  0.25292426
A1207.10265.F.4.KL.2009 -0.06653588  0.23471219  0.003740762  0.19133752
A1071.10746.F.2.KL.2009  0.18900197  0.31859945  0.484979665 -0.38569778
A0863.11177.F.1.KL.2009 -0.41485355 -0.24882175  0.006462603  0.20800901
A1053.11171.F.1.KL.2009 -0.13865827 -0.67759126  0.508188472  0.03710906
A0792.10517.F.2.KL.2009 -0.32102598  0.19042971 -0.025300606 -0.65511483
A0879.10285.F.2.KL.2009  0.41839250  0.04175301  0.002761719  0.21619624
A1086.10285.F.2.KL.2009  0.41839250  0.04175301  0.002761719  0.21619624
A1155.10145.F.4.KL.2009  0.40909216 -0.41477922 -0.516029321 -0.37031914
A0591.10265.F.4.KL.2009 -0.06653588  0.23471219  0.003740762  0.19133752
                               PCNM5
A0572.11489.F.2.KL.2009  0.055089123
A0828.11176.F.1.KL.2009 -0.803297095
A1207.10265.F.4.KL.2009  0.413862794
A1071.10746.F.2.KL.2009  0.008955055
A0863.11177.F.1.KL.2009 -0.053911361
A1053.11171.F.1.KL.2009  0.039494394
A0792.10517.F.2.KL.2009 -0.062499012
A0879.10285.F.2.KL.2009  0.006288942
A1086.10285.F.2.KL.2009  0.006288942
A1155.10145.F.4.KL.2009 -0.024134577
A0591.10265.F.4.KL.2009  0.413862794
                               PCNM1        PCNM2        PCNM3        PCNM4
A1109.10182.F.4.KL.2009 -0.162939005  0.008982237 -0.348275063  0.105134668
A1074.10686.F.2.KL.2009 -0.252206238  0.156025145 -0.071601984 -0.027541179
A1323.11176.F.1.KL.2009 -0.051503155  0.260414955  0.147448483 -0.231958227
A1016.10374.F.2.KL.2009 -0.252206238  0.156025145 -0.071601984 -0.027541179
A1085.10746.F.2.KL.2009 -0.142303675  0.107191412 -0.063685665 -0.113678527
A1578.11171.F.1.KL.2009 -0.004604112 -0.340070566 -0.018172483 -0.149101318
A1116.10517.F.2.KL.2009  0.250026956  0.074670535 -0.056913560  0.127165577
A1126.11171.F.1.KL.2009  0.051448584 -0.259699995 -0.039563514 -0.440209814
A1124.11489.F.2.KL.2009  0.250026956  0.074670535 -0.056913560  0.127165577
A1341.10686.F.2.KL.2009 -0.252924963  0.155309842 -0.074822922 -0.025065254
A1678.11171.F.1.KL.2009 -0.004604112 -0.340070566 -0.018172483 -0.149101318
A1001.10759.F.1.KL.2009 -0.019215756 -0.238441000  0.091272847  0.308391420
A1175.10746.F.2.KL.2009 -0.195889444  0.112999111 -0.291050611 -0.022754846
A1699.10391.F.2.KL.2009 -0.008839839 -0.237982133 -0.013428741 -0.063215279
A1037.10342.F.2.KL.2009  0.228102823  0.034513688 -0.030254334 -0.271618590
A1719.10754.F.1.KL.2009 -0.050648321 -0.104799254  0.199916316  0.107622303
A1320.10517.F.2.KL.2009  0.234898877  0.156250263  0.007645706  0.037102091
A1383.10318.F.3.KL.2009  0.054505126 -0.146289276 -0.032073607 -0.358520564
A1014.10461.F.1.KL.2009 -0.011626785 -0.219959016  0.028232903  0.256114027
A1689.11177.F.1.KL.2009  0.228102823  0.034513688 -0.030254334 -0.271618590
A1376.10182.F.4.KL.2009 -0.162939005  0.008982237 -0.348275063  0.105134668
A1113.10375.F.2.KL.2009  0.250658880  0.074149428 -0.057172043  0.118580171
A1023.11489.F.2.KL.2009  0.201853678  0.063233686 -0.044011066  0.279972571
A1132.10285.F.2.KL.2009 -0.175046286  0.076844674  0.343704907  0.008110658
A1090.10285.F.2.KL.2009 -0.175046286  0.076844674  0.343704907  0.008110658
A1202.10517.F.2.KL.2009  0.234898877  0.156250263  0.007645706  0.037102091
A1022.10517.F.2.KL.2009  0.234898877  0.156250263  0.007645706  0.037102091
A1219.10517.F.2.KL.2009  0.234898877  0.156250263  0.007645706  0.037102091
A1011.10374.F.2.KL.2009 -0.100424994  0.250237079  0.157589631 -0.076830315
A1127.11171.F.1.KL.2009 -0.072184540 -0.105541473  0.296615609  0.179090270
A1284.10377.F.2.KL.2009 -0.169633999  0.094255343  0.301822737 -0.023520671
A1137.10130.F.4.KL.2009 -0.014022551 -0.129296491  0.053952358  0.103014298
A1270.10182.F.4.KL.2009 -0.162939005  0.008982237 -0.348275063  0.105134668
A1706.10140.F.4.KL.2009 -0.012573027 -0.331696931  0.019674554  0.165125773
                               PCNM5        PCNM6         PCNM7        PCNM8
A1109.10182.F.4.KL.2009  0.163718874 -0.028265936 -1.023845e-01  0.126042464
A1074.10686.F.2.KL.2009 -0.011825732 -0.005374877 -5.830205e-02  0.031428585
A1323.11176.F.1.KL.2009 -0.193843523  0.138241492  1.141910e-01  0.187967118
A1016.10374.F.2.KL.2009 -0.011825732 -0.005374877 -5.830205e-02  0.031428585
A1085.10746.F.2.KL.2009 -0.273752324  0.100763414  3.110443e-01 -0.535501648
A1578.11171.F.1.KL.2009 -0.256198846 -0.245550181 -1.136985e-01  0.066331570
A1116.10517.F.2.KL.2009  0.064429133 -0.072479399 -9.141696e-02 -0.084570674
A1126.11171.F.1.KL.2009  0.119616939  0.031589531 -6.749461e-02 -0.064776296
A1124.11489.F.2.KL.2009  0.064429133 -0.072479399 -9.141696e-02 -0.084570674
A1341.10686.F.2.KL.2009 -0.006826961 -0.007013390 -6.264518e-02  0.038137552
A1678.11171.F.1.KL.2009 -0.256198846 -0.245550181 -1.136985e-01  0.066331570
A1001.10759.F.1.KL.2009 -0.037918670  0.446337274  1.065514e-02 -0.141673851
A1175.10746.F.2.KL.2009 -0.109136831  0.068181072  1.652983e-01 -0.201290300
A1699.10391.F.2.KL.2009 -0.196994643 -0.329064342 -9.803963e-02 -0.177722375
A1037.10342.F.2.KL.2009  0.168582531  0.178633884 -9.021856e-06  0.095750562
A1719.10754.F.1.KL.2009  0.316260166 -0.288378431  4.602375e-01  0.136730494
A1320.10517.F.2.KL.2009 -0.099503456 -0.016827111  1.643223e-02  0.090518918
A1383.10318.F.3.KL.2009  0.300456453  0.230762763  4.217787e-02 -0.177489912
A1014.10461.F.1.KL.2009 -0.098570280  0.393513809  1.544727e-01  0.195634388
A1689.11177.F.1.KL.2009  0.168582531  0.178633884 -9.021856e-06  0.095750562
A1376.10182.F.4.KL.2009  0.163718874 -0.028265936 -1.023845e-01  0.126042464
A1113.10375.F.2.KL.2009  0.069926660 -0.064940367 -9.033572e-02 -0.074825279
A1023.11489.F.2.KL.2009 -0.045706407 -0.205925544 -9.100783e-02 -0.248060553
A1132.10285.F.2.KL.2009  0.134157291 -0.100342272 -8.638663e-02  0.120132573
A1090.10285.F.2.KL.2009  0.134157291 -0.100342272 -8.638663e-02  0.120132573
A1202.10517.F.2.KL.2009 -0.099503456 -0.016827111  1.643223e-02  0.090518918
A1022.10517.F.2.KL.2009 -0.099503456 -0.016827111  1.643223e-02  0.090518918
A1219.10517.F.2.KL.2009 -0.099503456 -0.016827111  1.643223e-02  0.090518918
A1011.10374.F.2.KL.2009 -0.308894415  0.003588523  1.191800e-01  0.010923135
A1127.11171.F.1.KL.2009  0.193223062  0.134159561 -3.136079e-01 -0.403314801
A1284.10377.F.2.KL.2009  0.028153004  0.009045111 -2.964749e-01  0.004872444
A1137.10130.F.4.KL.2009  0.227889976 -0.212666228  5.400260e-01 -0.070441650
A1270.10182.F.4.KL.2009  0.163718874 -0.028265936 -1.023845e-01  0.126042464
A1706.10140.F.4.KL.2009 -0.275313755  0.194137695  4.337370e-02  0.322483236
                                PCNM9      PCNM10      PCNM11       PCNM12
A1109.10182.F.4.KL.2009  0.1001968041 -0.08345880  0.00079138  0.023100263
A1074.10686.F.2.KL.2009 -0.1241648005  0.10535144 -0.02267002 -0.072439810
A1323.11176.F.1.KL.2009  0.2344730028  0.09954332  0.12183680 -0.036252904
A1016.10374.F.2.KL.2009 -0.1241648005  0.10535144 -0.02267002 -0.072439810
A1085.10746.F.2.KL.2009 -0.1891403003  0.25242799  0.15821264  0.031369093
A1578.11171.F.1.KL.2009 -0.0360128534 -0.04932218  0.15861083 -0.008096134
A1116.10517.F.2.KL.2009 -0.1437780555  0.22329449  0.09084207 -0.046239932
A1126.11171.F.1.KL.2009 -0.2402687543 -0.29024235  0.10390405  0.035246766
A1124.11489.F.2.KL.2009 -0.1437780555  0.22329449  0.09084207 -0.046239932
A1341.10686.F.2.KL.2009 -0.1216265385  0.10214390 -0.02311423 -0.065883106
A1678.11171.F.1.KL.2009 -0.0360128534 -0.04932218  0.15861083 -0.008096134
A1001.10759.F.1.KL.2009  0.1838084446 -0.06789385  0.07034081  0.102667495
A1175.10746.F.2.KL.2009  0.1230248412 -0.09337005  0.16037223  0.176504213
A1699.10391.F.2.KL.2009  0.4831847712  0.35808670 -0.47140753  0.075458427
A1037.10342.F.2.KL.2009  0.1120486404  0.17398690  0.09554919 -0.023240719
A1719.10754.F.1.KL.2009 -0.0412204156  0.06589004  0.07073906  0.363507495
A1320.10517.F.2.KL.2009  0.1043865871 -0.15052965 -0.02485451  0.035878572
A1383.10318.F.3.KL.2009 -0.1518988827 -0.12599637 -0.45358580  0.067974579
A1014.10461.F.1.KL.2009 -0.1268832859  0.18042011 -0.40089866 -0.020723428
A1689.11177.F.1.KL.2009  0.1120486404  0.17398690  0.09554919 -0.023240719
A1376.10182.F.4.KL.2009  0.1001968041 -0.08345880  0.00079138  0.023100263
A1113.10375.F.2.KL.2009 -0.1278629243  0.25192829  0.11141472 -0.053533026
A1023.11489.F.2.KL.2009 -0.3727404007 -0.25057458 -0.23081786  0.052298982
A1132.10285.F.2.KL.2009 -0.0943958240  0.07949142  0.00690951  0.222569845
A1090.10285.F.2.KL.2009 -0.0943958240  0.07949142  0.00690951  0.222569845
A1202.10517.F.2.KL.2009  0.1043865871 -0.15052965 -0.02485451  0.035878572
A1022.10517.F.2.KL.2009  0.1043865871 -0.15052965 -0.02485451  0.035878572
A1219.10517.F.2.KL.2009  0.1043865871 -0.15052965 -0.02485451  0.035878572
A1011.10374.F.2.KL.2009 -0.0001711753 -0.37626956 -0.19359486  0.075021855
A1127.11171.F.1.KL.2009  0.3084073728 -0.18222655  0.27195194  0.059850086
A1284.10377.F.2.KL.2009 -0.0475174001 -0.01501119 -0.11289946 -0.553293404
A1137.10130.F.4.KL.2009  0.1543732921 -0.15364916  0.04713741 -0.600139336
A1270.10182.F.4.KL.2009  0.1001968041 -0.08345880  0.00079138  0.023100263
A1706.10140.F.4.KL.2009 -0.2134726214  0.03168417  0.20896947 -0.067995363
                               PCNM13        PCNM14        PCNM15        PCNM16
A1109.10182.F.4.KL.2009  4.905628e-05  7.361224e-05  1.197193e-03 -6.549269e-04
A1074.10686.F.2.KL.2009 -2.021305e-03 -1.182506e-02  3.730989e-01 -1.656045e-01
A1323.11176.F.1.KL.2009 -9.319822e-03 -2.761080e-01  1.853786e-01  4.364989e-01
A1016.10374.F.2.KL.2009 -2.021305e-03 -1.182506e-02  3.730989e-01 -1.656045e-01
A1085.10746.F.2.KL.2009 -2.365126e-04 -4.817139e-03 -8.697717e-03  1.122864e-02
A1578.11171.F.1.KL.2009 -1.061924e-02 -1.622620e-04 -2.462657e-05 -3.156796e-05
A1116.10517.F.2.KL.2009 -3.692084e-03 -2.779472e-01 -1.507480e-01 -3.243179e-01
A1126.11171.F.1.KL.2009 -4.979969e-01 -3.907784e-03  3.753623e-04  8.530592e-04
A1124.11489.F.2.KL.2009 -3.692084e-03 -2.779472e-01 -1.507480e-01 -3.243179e-01
A1341.10686.F.2.KL.2009 -1.474694e-03  2.101881e-02 -7.462929e-01  3.298677e-01
A1678.11171.F.1.KL.2009 -1.061924e-02 -1.622620e-04 -2.462657e-05 -3.156796e-05
A1001.10759.F.1.KL.2009 -5.510994e-03 -4.326547e-03  2.018966e-03  3.146212e-03
A1175.10746.F.2.KL.2009  1.473892e-03  4.311949e-04  7.280378e-03 -2.691647e-03
A1699.10391.F.2.KL.2009  1.684059e-02 -1.287176e-03 -4.190956e-04 -9.290837e-04
A1037.10342.F.2.KL.2009 -3.728865e-04 -4.255304e-03 -5.839495e-04 -3.061323e-04
A1719.10754.F.1.KL.2009 -2.294366e-05 -1.335445e-03  4.694582e-03  1.692373e-04
A1320.10517.F.2.KL.2009  1.574920e-04  1.607378e-03 -8.855467e-04 -3.666860e-04
A1383.10318.F.3.KL.2009  5.055975e-01  1.079905e-02  3.144346e-04 -1.224807e-03
A1014.10461.F.1.KL.2009 -4.911369e-01 -9.492157e-04 -2.099899e-03 -3.257833e-03
A1689.11177.F.1.KL.2009 -3.728865e-04 -4.255304e-03 -5.839495e-04 -3.061323e-04
A1376.10182.F.4.KL.2009  4.905628e-05  7.361224e-05  1.197193e-03 -6.549269e-04
A1113.10375.F.2.KL.2009 -1.576922e-02  7.968917e-01  1.121221e-01  1.983995e-01
A1023.11489.F.2.KL.2009  1.922293e-02 -2.378499e-01  1.946384e-01  4.538696e-01
A1132.10285.F.2.KL.2009  5.795134e-05 -3.426585e-06 -4.305359e-05 -7.085981e-06
A1090.10285.F.2.KL.2009  5.795134e-05 -3.426585e-06 -4.305359e-05 -7.085981e-06
A1202.10517.F.2.KL.2009  1.574920e-04  1.607378e-03 -8.855467e-04 -3.666860e-04
A1022.10517.F.2.KL.2009  1.574920e-04  1.607378e-03 -8.855467e-04 -3.666860e-04
A1219.10517.F.2.KL.2009  1.574920e-04  1.607378e-03 -8.855467e-04 -3.666860e-04
A1011.10374.F.2.KL.2009  9.560059e-03  2.769053e-01 -1.848540e-01 -4.357799e-01
A1127.11171.F.1.KL.2009  1.456562e-03 -1.640541e-04 -1.540004e-07 -3.311824e-06
A1284.10377.F.2.KL.2009 -5.690643e-05  2.788853e-03 -2.384295e-03 -4.108636e-03
A1137.10130.F.4.KL.2009 -3.856317e-03 -2.530128e-04 -5.121127e-03 -1.155840e-03
A1270.10182.F.4.KL.2009  4.905628e-05  7.361224e-05  1.197193e-03 -6.549269e-04
A1706.10140.F.4.KL.2009  5.037476e-01  3.899543e-03 -4.015441e-04 -9.158700e-04
                               PCNM1       PCNM2       PCNM3        PCNM4
A1710.10391.F.2.KL.2009  0.319792802  0.14980949 -0.18136744 -0.441564360
A1614.10754.F.1.KL.2009 -0.087227624  0.30016768  0.38935634 -0.017861650
A1629.10746.F.2.KL.2009 -0.181281389 -0.08404232 -0.22370066 -0.004358792
A1890.10130.F.4.KL.2009  0.009758756  0.25721885  0.52041007 -0.057995405
A1749.10746.F.2.KL.2009 -0.196310355 -0.01227327 -0.27642169  0.032031503
A1625.10374.F.2.KL.2009 -0.184467488 -0.08377719 -0.22419382 -0.004723598
A1335.11177.F.1.KL.2009  0.388001217  0.11391339 -0.10639263  0.117372829
A1533.10759.F.1.KL.2009  0.261759252  0.11354657 -0.07230474  0.750883841
A1747.10182.F.4.KL.2009 -0.175528219  0.26270403  0.09967855  0.002447276
A1617.10686.F.2.KL.2009 -0.211972471  0.04660347 -0.13214649  0.019147180
A1970.10818.F.1.KL.2009  0.355277898  0.16988504 -0.20373700  0.139093725
A1652.10375.F.2.KL.2009 -0.006843202 -0.34624646 -0.05379917 -0.003884385
A1672.11489.F.2.KL.2009  0.085768893 -0.35927622  0.14531088 -0.052202816
A1613.10285.F.2.KL.2009 -0.207003288  0.16333836  0.08861610 -0.019153288
A1732.11150.F.0.KL.2009  0.198428819 -0.30717197  0.28108740  0.036022992
A1712.10285.F.2.KL.2009 -0.207955515  0.11206441 -0.10175332  0.020419405
A1876.10285.F.2.KL.2009 -0.207003288  0.16333836  0.08861610 -0.019153288
A1586.10140.F.4.KL.2009 -0.101381513 -0.26332014 -0.02166710 -0.014837280
A1342.10391.F.2.KL.2009  0.319792802  0.14980949 -0.18136744 -0.441564360
A1660.10318.F.3.KL.2009  0.141747897 -0.32957490  0.31958966 -0.044429427
A1661.10140.F.4.KL.2009 -0.101381513 -0.26332014 -0.02166710 -0.014837280
A1513.10686.F.2.KL.2009 -0.211972471  0.04660347 -0.13214649  0.019147180
                               PCNM5        PCNM6        PCNM7       PCNM8
A1710.10391.F.2.KL.2009  0.011053298  0.002820872 -0.036298659  0.05530041
A1614.10754.F.1.KL.2009  0.171306644 -0.336248092 -0.368926717 -0.07262696
A1629.10746.F.2.KL.2009 -0.324249728  0.109938098 -0.077283893 -0.14543678
A1890.10130.F.4.KL.2009 -0.305510954  0.133745008  0.275224407  0.24642917
A1749.10746.F.2.KL.2009 -0.003726054 -0.035153245  0.487293992  0.16063851
A1625.10374.F.2.KL.2009 -0.308672264  0.125579624 -0.081835673 -0.14106520
A1335.11177.F.1.KL.2009  0.140285670  0.002728744  0.281935743 -0.42855940
A1533.10759.F.1.KL.2009 -0.058901745  0.043211571 -0.089222794  0.12352226
A1747.10182.F.4.KL.2009 -0.317425234 -0.166351550  0.129644082 -0.31050218
A1617.10686.F.2.KL.2009  0.149231770 -0.335986082 -0.068607616  0.04348910
A1970.10818.F.1.KL.2009 -0.043032273  0.048648869 -0.201490994  0.31290155
A1652.10375.F.2.KL.2009 -0.188292739 -0.511575583  0.139238485  0.20825325
A1672.11489.F.2.KL.2009 -0.410154858  0.160309330 -0.381517448 -0.19335527
A1613.10285.F.2.KL.2009  0.085135349  0.286647005  0.098799330  0.11181391
A1732.11150.F.0.KL.2009  0.230735379 -0.044777538  0.307310604 -0.42328300
A1712.10285.F.2.KL.2009  0.322022954  0.172211003 -0.301581882 -0.27579192
A1876.10285.F.2.KL.2009  0.085135349  0.286647005  0.098799330  0.11181391
A1586.10140.F.4.KL.2009  0.240982570  0.219652754 -0.000234364  0.12479641
A1342.10391.F.2.KL.2009  0.011053298  0.002820872 -0.036298659  0.05530041
A1660.10318.F.3.KL.2009  0.122809229 -0.048535338 -0.106105293  0.26807629
A1661.10140.F.4.KL.2009  0.240982570  0.219652754 -0.000234364  0.12479641
A1513.10686.F.2.KL.2009  0.149231770 -0.335986082 -0.068607616  0.04348910
                               PCNM9        PCNM10
A1710.10391.F.2.KL.2009  0.009098622 -5.449018e-06
A1614.10754.F.1.KL.2009 -0.138140017 -5.846466e-03
A1629.10746.F.2.KL.2009 -0.071925661 -7.071973e-01
A1890.10130.F.4.KL.2009 -0.150078629  8.303926e-04
A1749.10746.F.2.KL.2009  0.313673810 -3.229671e-03
A1625.10374.F.2.KL.2009 -0.083839125  7.066866e-01
A1335.11177.F.1.KL.2009 -0.184155652  2.647555e-05
A1533.10759.F.1.KL.2009  0.009287261 -6.238327e-05
A1747.10182.F.4.KL.2009  0.486146406  1.508061e-02
A1617.10686.F.2.KL.2009 -0.165557408  1.165571e-03
A1970.10818.F.1.KL.2009  0.079738204  1.118671e-03
A1652.10375.F.2.KL.2009 -0.161518412  8.929363e-03
A1672.11489.F.2.KL.2009 -0.105387008  1.090778e-04
A1613.10285.F.2.KL.2009 -0.160826510 -4.318062e-03
A1732.11150.F.0.KL.2009 -0.065184500  5.273504e-05
A1712.10285.F.2.KL.2009  0.328121031 -2.423270e-03
A1876.10285.F.2.KL.2009 -0.160826510 -4.318062e-03
A1586.10140.F.4.KL.2009 -0.085281002 -5.366870e-03
A1342.10391.F.2.KL.2009  0.009098622 -5.449018e-06
A1660.10318.F.3.KL.2009  0.548394889  2.974745e-03
A1661.10140.F.4.KL.2009 -0.085281002 -5.366870e-03
A1513.10686.F.2.KL.2009 -0.165557408  1.165571e-03
[1] "Acessing PCNM scores"
[1] "Analysis for Core OTUs"
[1] "Variance partitioning - Core OTUs"
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[1L]], X = dots[[2L]][[1L]], ~., data = dots[[3L]][[1L]])

Explanatory tables:
X1:  dots[[2L]][[1L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 6595.5 
            Variance: 412.22 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.51360       0.02721     TRUE
[b+c] = X2            7   0.55668       0.21187     TRUE
[a+b+c] = X1+X2      14   0.84950      -0.20402     TRUE
Individual fractions                                    
[a] = X1|X2           7                -0.41589     TRUE
[b]                   0                 0.44310    FALSE
[c] = X2|X1           6                -0.23122     TRUE
[d] = Residuals                         1.20402    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 4`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[2L]], X = dots[[2L]][[2L]], ~., data = dots[[3L]][[2L]])

Explanatory tables:
X1:  dots[[2L]][[2L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 7519 
            Variance: 375.95 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.57732       0.06072     TRUE
[b+c] = X2           11   0.53989      -0.02247     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 5`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[3L]], X = dots[[2L]][[3L]], ~., data = dots[[3L]][[3L]])

Explanatory tables:
X1:  dots[[2L]][[3L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 6689.1 
            Variance: 371.62 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.25349      -0.03362     TRUE
[b+c] = X2           12   0.72756       0.18269     TRUE
[a+b+c] = X1+X2      17   0.93543      -0.16218     TRUE
Individual fractions                                    
[a] = X1|X2           5                -0.34487     TRUE
[b]                   0                 0.31125    FALSE
[c] = X2|X1          12                -0.12856     TRUE
[d] = Residuals                         1.16218    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 6`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[4L]], X = dots[[2L]][[4L]], ~., data = dots[[3L]][[4L]])

Explanatory tables:
X1:  dots[[2L]][[4L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 3009.6 
            Variance: 300.96 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.49308      -0.01384     TRUE
[b+c] = X2            8   0.83737       0.18686     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           2                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           5                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 7`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[5L]], X = dots[[2L]][[5L]], ~., data = dots[[3L]][[5L]])

Explanatory tables:
X1:  dots[[2L]][[5L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 8654.6 
            Variance: 262.26 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           16   0.52933       0.08635     TRUE
[b+c] = X2           17   0.52868       0.02790     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          16                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          17                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 8`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[6L]], X = dots[[2L]][[6L]], ~., data = dots[[3L]][[6L]])

Explanatory tables:
X1:  dots[[2L]][[6L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 4567.4 
            Variance: 217.5 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           10   0.52650       0.09604     TRUE
[b+c] = X2            9   0.42084      -0.01352     TRUE
[a+b+c] = X1+X2      19   0.91604       0.11846     TRUE
Individual fractions                                    
[a] = X1|X2          10                 0.13199     TRUE
[b]                   0                -0.03595    FALSE
[c] = X2|X1           9                 0.02242     TRUE
[d] = Residuals                         0.88154    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
[1] "Testing with RDA (full model) - core OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

               Inertia Proportion Rank
Total         412.2165     1.0000     
Constrained   229.4718     0.5567    7
Unconstrained 182.7447     0.4433    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7 
100.33  39.07  23.44  21.78  19.04  13.76  12.05 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
65.48 24.24 21.68 19.47 16.91 13.83  9.84  6.74  4.55 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

               Inertia Proportion Rank
Total         375.9506     1.0000     
Constrained   202.9719     0.5399   11
Unconstrained 172.9788     0.4601    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 
40.54 30.37 25.70 21.27 17.58 13.89 13.60 13.40 10.71  8.01  7.90 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
36.63 27.65 23.47 18.80 17.66 15.20 13.05 11.91  8.60 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear, data = data)

               Inertia Proportion Rank
Total         371.6166     1.0000     
Constrained   270.3745     0.7276   12
Unconstrained 101.2421     0.2724    6
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
105.74  42.26  31.35  21.40  16.25  11.51   9.49   8.64   8.13   6.49   4.93 
 RDA12 
  4.19 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6 
29.917 24.530 16.900 14.397  9.841  5.658 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

               Inertia Proportion Rank
Total         300.9560     1.0000     
Constrained   252.0124     0.8374    8
Unconstrained  48.9436     0.1626    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8 
56.47 52.19 37.37 31.44 26.25 19.86 15.10 13.34 

Eigenvalues for unconstrained axes:
   PC1    PC2 
30.646 18.297 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

               Inertia Proportion Rank
Total         262.2598     1.0000     
Constrained   138.6511     0.5287   17
Unconstrained 123.6087     0.4713   16
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
26.170 19.698 13.368 11.348 10.174  8.946  7.302  6.429  6.083  5.272  4.649 
 RDA12  RDA13  RDA14  RDA15  RDA16  RDA17 
 4.527  4.334  3.275  3.034  2.310  1.732 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8    PC9   PC10   PC11 
25.171 13.256 12.596 11.108  8.474  7.764  7.115  6.379  5.809  5.474  4.664 
  PC12   PC13   PC14   PC15   PC16 
 3.985  3.577  3.261  2.888  2.087 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

               Inertia Proportion Rank
Total         217.4969     1.0000     
Constrained    91.5320     0.4208    9
Unconstrained 125.9649     0.5792   12
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9 
20.834 17.500 12.396  9.608  8.129  6.659  6.183  5.282  4.941 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
33.06 16.67 15.11 10.93  9.46  8.15  7.65  7.00  5.45  4.62  4.48  3.39 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)  
Model     7   229.47 1.6145  0.014 *
Residual  9   182.75                
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance    F Pr(>F)
Model    11   202.97 0.96  0.667
Residual  9   172.98            

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    12   270.37 1.3353  0.101
Residual  6   101.24              

$`Month 6`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     8  252.012 1.2873  0.103
Residual  2   48.944              

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    17   138.65 1.0557  0.275
Residual 16   123.61              

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     9   91.532 0.9689  0.604
Residual 12  125.965              

$`Month 3`
$`Month 3`$r.squared
[1] 0.5566778

$`Month 3`$adj.r.squared
[1] 0.2118717


$`Month 4`
$`Month 4`$r.squared
[1] 0.5398896

$`Month 4`$adj.r.squared
[1] -0.02246746


$`Month 5`
$`Month 5`$r.squared
[1] 0.727563

$`Month 5`$adj.r.squared
[1] 0.182689


$`Month 6`
$`Month 6`$r.squared
[1] 0.8373729

$`Month 6`$adj.r.squared
[1] 0.1868644


$`Month 7`
$`Month 7`$r.squared
[1] 0.5286786

$`Month 7`$adj.r.squared
[1] 0.02789955


$`Month 8`
$`Month 8`$r.squared
[1] 0.420843

$`Month 8`$adj.r.squared
[1] -0.01352478


[1] "Testing with partial RDA (fraction [a]) - core OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

               Inertia Proportion Rank
Total         412.2165     1.0000     
Conditional   211.7158     0.5136    8
Constrained   138.4612     0.3359    6
Unconstrained  62.0395     0.1505    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6 
55.16 24.88 19.62 16.38 12.31 10.11 

Eigenvalues for unconstrained axes:
  PC1   PC2 
56.59  5.45 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

               Inertia Proportion Rank
Total         375.9506     1.0000     
Conditional   217.0450     0.5773   11
Constrained   158.9056     0.4227    9
Unconstrained   0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
34.00 24.54 22.31 16.77 15.37 14.51 11.81 11.06  8.55 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear + Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         371.61656    1.00000     
Conditional    94.20274    0.25349    5
Constrained   253.42009    0.68194   12
Unconstrained  23.99373    0.06457    1
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
100.83  38.94  22.61  18.27  14.92  13.81  11.21   9.35   8.42   6.10   5.57 
 RDA12 
  3.40 

Eigenvalues for unconstrained axes:
   PC1 
23.994 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

               Inertia Proportion Rank
Total         300.9560     1.0000     
Conditional   148.3961     0.4931    5
Constrained   152.5600     0.5069    5
Unconstrained   0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5 
56.89 35.15 23.14 21.09 16.29 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

               Inertia Proportion Rank
Total         262.2598     1.0000     
Conditional   138.8230     0.5293   16
Constrained   123.4368     0.4707   17
Unconstrained   0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
21.662 21.110 13.201 10.435  9.543  6.900  6.769  6.318  4.900  4.438  3.904 
 RDA12  RDA13  RDA14  RDA15  RDA16  RDA17 
 3.777  2.839  2.437  2.106  1.651  1.448 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         217.49691    1.00000     
Conditional   114.51137    0.52650   10
Constrained    84.72538    0.38955    9
Unconstrained  18.26015    0.08396    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9 
22.335 14.911 11.736  9.363  7.473  6.226  4.992  4.132  3.556 

Eigenvalues for unconstrained axes:
  PC1   PC2 
10.79  7.47 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     6   138.46 0.7439  0.751
Residual  2    62.04              

$`Month 4`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     9   158.91         
Residual  0     0.00         

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model    12  253.420 0.8802    0.7
Residual  1   23.994              

$`Month 6`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     5   152.56         
Residual  0     0.00         

$`Month 7`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model    17   123.44         
Residual  0     0.00         

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     9   84.725 1.0311  0.493
Residual  2   18.260              

$`Month 3`
$`Month 3`$r.squared
[1] 0.3358943

$`Month 3`$adj.r.squared
[1] -0.2312249


$`Month 4`
$`Month 4`$r.squared
[1] 0.4226768

$`Month 4`$adj.r.squared
[1] NA


$`Month 5`
$`Month 5`$r.squared
[1] 0.6819397

$`Month 5`$adj.r.squared
[1] -0.1285619


$`Month 6`
$`Month 6`$r.squared
[1] 0.5069178

$`Month 6`$adj.r.squared
[1] NA


$`Month 7`
$`Month 7`$r.squared
[1] 0.4706661

$`Month 7`$adj.r.squared
[1] NA


$`Month 8`
$`Month 8`$r.squared
[1] 0.3895475

$`Month 8`$adj.r.squared
[1] 0.02242405


[1] "Spatial variables - core OTU"
Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
+ PCNM1          0.0520414574
<All variables>  0.0272069567
+ PCNM6          0.0188536015
+ PCNM5          0.0020380627
<none>           0.0000000000
+ PCNM2         -0.0001143783
+ PCNM8         -0.0003106660
+ PCNM3         -0.0100492192
+ PCNM4         -0.0129683257
+ PCNM7         -0.0349801555

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.0607182707
+ PCNM7          0.0186198874
+ PCNM1          0.0163147046
+ PCNM11         0.0161728536
+ PCNM5          0.0045115808
<none>           0.0000000000
+ PCNM3         -0.0002148757
+ PCNM4         -0.0016800087
+ PCNM8         -0.0025241665
+ PCNM10        -0.0032610776
+ PCNM6         -0.0041200897
+ PCNM9         -0.0074617299
+ PCNM2         -0.0075957922

        Df    AIC      F Pr(>F)  
+ PCNM7  1 126.02 1.3795  0.062 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                 R2.adjusted
+ PCNM4          0.003648782
<none>           0.000000000
+ PCNM1         -0.002843785
+ PCNM5         -0.004436922
+ PCNM3         -0.004938507
+ PCNM2         -0.017141314
<All variables> -0.033623052

Step: R2.adj= 0 
Call: x ~ 1 
 
                 R2.adjusted
+ PCNM2          0.039196981
+ PCNM4          0.013984787
+ PCNM5          0.008706091
<none>           0.000000000
<All variables> -0.013835652
+ PCNM1         -0.030251250
+ PCNM3         -0.039323083

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.0863539812
+ PCNM3          0.0218388379
+ PCNM1          0.0201482514
+ PCNM12         0.0190125308
+ PCNM2          0.0076336521
+ PCNM8          0.0051730076
+ PCNM11         0.0031908854
+ PCNM7          0.0030106743
+ PCNM15         0.0025499836
+ PCNM13         0.0018312481
<none>           0.0000000000
+ PCNM9         -0.0009946178
+ PCNM6         -0.0017756441
+ PCNM4         -0.0035356554
+ PCNM5         -0.0042724464
+ PCNM10        -0.0074370599
+ PCNM16        -0.0084305376
+ PCNM14        -0.0120675575

        Df    AIC      F Pr(>F)  
+ PCNM3  1 190.54 1.7368  0.022 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.02183884 
Call: x ~ PCNM3 
 
                R2.adjusted
<All variables>  0.08635398
+ PCNM1          0.04334151
+ PCNM12         0.04216915
+ PCNM2          0.03042322
+ PCNM8          0.02788320
+ PCNM11         0.02583713
+ PCNM7          0.02565111
+ PCNM15         0.02517556
+ PCNM13         0.02443364
<none>           0.02183884
+ PCNM9          0.02151661
+ PCNM6          0.02071039
+ PCNM4          0.01889361
+ PCNM5          0.01813305
+ PCNM10         0.01486635
+ PCNM16         0.01384083
+ PCNM14         0.01008648

        Df    AIC      F Pr(>F)  
+ PCNM1  1 190.71 1.7193   0.02 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.04334151 
Call: x ~ PCNM3 + PCNM1 
 
                R2.adjusted
<All variables>  0.08635398
+ PCNM12         0.06506626
+ PCNM2          0.05292879
+ PCNM8          0.05030410
+ PCNM11         0.04818984
+ PCNM7          0.04799761
+ PCNM15         0.04750621
+ PCNM13         0.04673956
+ PCNM9          0.04372530
<none>           0.04334151
+ PCNM6          0.04289221
+ PCNM4          0.04101486
+ PCNM5          0.04022895
+ PCNM10         0.03685336
+ PCNM16         0.03579366
+ PCNM14         0.03191417

         Df    AIC      F Pr(>F)  
+ PCNM12  1 190.81 1.7203  0.026 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.06506626 
Call: x ~ PCNM3 + PCNM1 + PCNM12 
 
                R2.adjusted
<All variables>  0.08635398
+ PCNM2          0.07573327
+ PCNM8          0.07301807
+ PCNM11         0.07083090
+ PCNM7          0.07063205
+ PCNM15         0.07012370
+ PCNM13         0.06933061
+ PCNM9          0.06621242
+ PCNM6          0.06535059
<none>           0.06506626
+ PCNM4          0.06340851
+ PCNM5          0.06259550
+ PCNM10         0.05910351
+ PCNM16         0.05800726
+ PCNM14         0.05399400

        Df    AIC      F Pr(>F)  
+ PCNM2  1 191.27 1.3462   0.09 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  9.603889e-02
+ PCNM4          4.142610e-02
+ PCNM1          1.536373e-02
+ PCNM2          1.053862e-02
+ PCNM9          5.400297e-03
+ PCNM6          3.515717e-03
+ PCNM10         2.569219e-03
+ PCNM8          1.142546e-03
+ PCNM5          5.869039e-06
<none>           0.000000e+00
+ PCNM3         -5.068011e-03
+ PCNM7         -2.207270e-02

        Df    AIC      F Pr(>F)  
+ PCNM4  1 119.38 1.9075   0.02 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.0414261 
Call: x ~ PCNM4 
 
                R2.adjusted
<All variables>  0.09603889
+ PCNM1          0.05977877
+ PCNM2          0.05469971
+ PCNM9          0.04929094
+ PCNM6          0.04730717
+ PCNM10         0.04631086
+ PCNM8          0.04480910
+ PCNM5          0.04361260
<none>           0.04142610
+ PCNM3          0.03827167
+ PCNM7          0.02037200

        Df    AIC      F Pr(>F)  
+ PCNM1  1 119.83 1.3904  0.084 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 3`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total           412.2     
Unconstrained   412.2   16
Inertia is variance 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8    PC9   PC10   PC11 
110.78  66.90  35.04  29.39  23.20  21.50  20.08  19.14  17.52  15.90  13.71 
  PC12   PC13   PC14   PC15   PC16 
 10.48   9.43   8.80   5.96   4.40 


$`Month 4`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total             376     
Unconstrained     376   20
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
53.57 41.45 37.70 28.76 26.16 21.38 19.72 18.79 
(Showing 8 of 20 unconstrained eigenvalues)


$`Month 5`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total           371.6     
Unconstrained   371.6   18
Inertia is variance 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 
120.37  49.51  37.45  24.89  19.23  18.25  17.11  14.34 
(Showing 8 of 18 unconstrained eigenvalues)


$`Month 6`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total             301     
Unconstrained     301   10
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10 
58.54 53.10 42.36 36.07 29.29 21.44 19.32 14.79 13.56 12.50 


$`Month 7`
Call: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12, data = data)

               Inertia Proportion Rank
Total         262.2598     1.0000     
Constrained    39.3548     0.1501    3
Unconstrained 222.9050     0.8499   30
Inertia is variance 

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3 
16.907 13.247  9.201 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
34.03 24.86 18.20 14.43 11.93 11.29 10.35  9.70 
(Showing 8 of 30 unconstrained eigenvalues)


$`Month 8`
Call: rda(formula = x ~ PCNM4, data = data)

                Inertia Proportion Rank
Total         217.49691    1.00000     
Constrained    18.93799    0.08707    1
Unconstrained 198.55891    0.91293   20
Inertia is variance 

Eigenvalues for constrained axes:
  RDA1 
18.938 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
32.82 24.36 21.53 18.25 14.97 10.36  9.78  8.33 
(Showing 8 of 20 unconstrained eigenvalues)


[1] "Summary of spatial selection process - core OTU"
$`Month 3`
NULL

$`Month 4`
NULL

$`Month 5`
NULL

$`Month 6`
NULL

$`Month 7`
                  R2.adj Df    AIC      F Pr(>F)  
+ PCNM3         0.021839  1 190.54 1.7368  0.022 *
+ PCNM1         0.043342  1 190.71 1.7193  0.020 *
+ PCNM12        0.065066  1 190.81 1.7203  0.026 *
<All variables> 0.086354                          
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
                  R2.adj Df    AIC      F Pr(>F)  
+ PCNM4         0.041426  1 119.38 1.9075   0.02 *
<All variables> 0.096039                          
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

[1] "ANOVA on full spatial selection - core OTU"
$`Month 3`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0     0.00  0       
Residual 16   412.22          

$`Month 4`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0     0.00  0       
Residual 20   375.95          

$`Month 5`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0     0.00  0       
Residual 18   371.62          

$`Month 6`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0     0.00  0       
Residual 10   300.96          

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12, data = data)
         Df Variance      F Pr(>F)    
Model     3   39.355 1.7655  0.001 ***
Residual 30  222.905                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM4, data = data)
         Df Variance      F Pr(>F)  
Model     1   18.938 1.9075  0.013 *
Residual 20  198.559                
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

[1] "Partition Bray-Curtis dissimilarities - core OTUs"
Warning messages:
1: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
2: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
3: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
4: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
5: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
6: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 81.24 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            7   0.18681      -0.44568     TRUE
[b+c] = X2            8   0.85834       0.71668     TRUE
[a+b+c] = X1+X2      14   0.78263      -0.73893     TRUE
Individual fractions                                    
[a] = X1|X2           6                -1.45562     TRUE
[b]                   0                 1.00994    FALSE
[c] = X2|X1           7                -0.29326     TRUE
[d] = Residuals                         1.73893    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 4`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 3.7832 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.48617      -0.14185     TRUE
[b+c] = X2           11   0.59516       0.10036     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 5`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 4259.9 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           12   0.99562       0.98687     TRUE
[b+c] = X2            5   1.46508       1.64396     TRUE
[a+b+c] = X1+X2      17   0.99996       0.99929     TRUE
Individual fractions                                    
[a] = X1|X2          12                -0.64466     TRUE
[b]                   0                 1.63153    FALSE
[c] = X2|X1           5                 0.01243     TRUE
[d] = Residuals                         0.00071    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 6`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 1.2463 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.84412        0.2206     TRUE
[b+c] = X2            5   0.45400       -0.0920     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           5                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           2                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 7`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 4.3078 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           17   0.51728       0.00439     TRUE
[b+c] = X2           16   0.50617       0.04139     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          17                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          16                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 8`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 2.3145 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            9   0.39025      -0.06707     TRUE
[b+c] = X2           10   0.52001       0.08366     TRUE
[a+b+c] = X1+X2      19   0.90671       0.02043     TRUE
Individual fractions                                    
[a] = X1|X2           9                -0.06323     TRUE
[b]                   0                -0.00384    FALSE
[c] = X2|X1          10                 0.08750     TRUE
[d] = Residuals                         0.97957    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
Warning message:
In rm(abFrac, aFrac, abFrac0, pcnm_df, bcFrac, bcFrac0, step.space) :
  object 'abFrac0' not found
[1] "Analysis for non-core OTUs"
[1] "Variance partitioning - non-core OTUs"
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[1L]], X = dots[[2L]][[1L]], ~., data = dots[[3L]][[1L]])

Explanatory tables:
X1:  dots[[2L]][[1L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 66674 
            Variance: 4167.1 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.56033       0.12065     TRUE
[b+c] = X2            7   0.52845       0.16170     TRUE
[a+b+c] = X1+X2      14   0.92701       0.41609     TRUE
Individual fractions                                    
[a] = X1|X2           7                 0.25440     TRUE
[b]                   0                -0.13374    FALSE
[c] = X2|X1           6                 0.29544     TRUE
[d] = Residuals                         0.58391    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 4`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[2L]], X = dots[[2L]][[2L]], ~., data = dots[[3L]][[2L]])

Explanatory tables:
X1:  dots[[2L]][[2L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 85811 
            Variance: 4290.5 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.59337       0.09637     TRUE
[b+c] = X2           11   0.54191      -0.01797     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 5`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[3L]], X = dots[[2L]][[3L]], ~., data = dots[[3L]][[3L]])

Explanatory tables:
X1:  dots[[2L]][[3L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 62990 
            Variance: 3499.5 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.29468       0.02340     TRUE
[b+c] = X2           12   0.71855       0.15564     TRUE
[a+b+c] = X1+X2      17   0.92972      -0.26507     TRUE
Individual fractions                                    
[a] = X1|X2           5                -0.42071     TRUE
[b]                   0                 0.44411    FALSE
[c] = X2|X1          12                -0.28847     TRUE
[d] = Residuals                         1.26507    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 6`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[4L]], X = dots[[2L]][[4L]], ~., data = dots[[3L]][[4L]])

Explanatory tables:
X1:  dots[[2L]][[4L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 38851 
            Variance: 3885.1 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.52248       0.04497     TRUE
[b+c] = X2            8   0.81278       0.06390     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           2                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           5                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 7`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[5L]], X = dots[[2L]][[5L]], ~., data = dots[[3L]][[5L]])

Explanatory tables:
X1:  dots[[2L]][[5L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 111264 
            Variance: 3371.6 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           16   0.57237       0.16990     TRUE
[b+c] = X2           17   0.52464       0.01957     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          16                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          17                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 8`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[6L]], X = dots[[2L]][[6L]], ~., data = dots[[3L]][[6L]])

Explanatory tables:
X1:  dots[[2L]][[6L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 72916 
            Variance: 3472.2 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           10   0.50965       0.06389     TRUE
[b+c] = X2            9   0.45838       0.05217     TRUE
[a+b+c] = X1+X2      19   0.91274       0.08380     TRUE
Individual fractions                                    
[a] = X1|X2          10                 0.03163     TRUE
[b]                   0                 0.03226    FALSE
[c] = X2|X1           9                 0.01991     TRUE
[d] = Residuals                         0.91620    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
[1] "Testing with RDA (full model) - non-core OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4167.1093     1.0000     
Constrained   2202.1246     0.5285    7
Unconstrained 1964.9847     0.4715    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7 
605.8 349.2 304.9 273.4 250.2 246.8 171.8 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
356.9 303.5 261.7 258.4 242.9 216.9 157.1 104.8  62.8 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4290.5292     1.0000     
Constrained   2325.1011     0.5419   11
Unconstrained 1965.4281     0.4581    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
297.50 283.02 251.09 223.20 214.86 202.97 192.23 180.54 168.85 161.08 149.76 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
354.6 246.6 240.9 221.0 205.4 189.6 179.3 169.1 159.0 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear, data = data)

                Inertia Proportion Rank
Total         3499.4512     1.0000     
Constrained   2514.5179     0.7185   12
Unconstrained  984.9332     0.2815    6
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
667.4 384.6 283.6 224.3 215.7 173.5 151.0 132.4 102.3  78.2  58.0  43.5 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6 
294.18 244.14 187.31 121.56  89.68  48.07 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3885.0912     1.0000     
Constrained   3157.7254     0.8128    8
Unconstrained  727.3659     0.1872    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8 
692.7 475.1 469.3 405.7 368.0 342.2 275.2 129.6 

Eigenvalues for unconstrained axes:
  PC1   PC2 
369.8 357.5 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3371.6249     1.0000     
Constrained   1768.8830     0.5246   17
Unconstrained 1602.7419     0.4754   16
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
305.48 177.18 144.09 124.85 113.59 109.79 105.15  94.20  91.34  84.96  79.44 
 RDA12  RDA13  RDA14  RDA15  RDA16  RDA17 
 76.41  68.73  57.78  53.69  48.48  33.72 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12  PC13 
333.6 150.5 142.9 128.2 120.8 114.1  90.8  82.2  73.5  68.3  64.5  60.1  53.4 
 PC14  PC15  PC16 
 45.0  39.9  35.1 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3472.1815     1.0000     
Constrained   1591.5913     0.4584    9
Unconstrained 1880.5902     0.5416   12
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
359.2 238.3 188.6 169.2 162.6 131.7 122.2 113.2 106.6 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8    PC9   PC10   PC11 
306.38 251.82 198.89 175.01 164.48 156.81 139.59 119.07 109.57 103.15  87.79 
  PC12 
 68.05 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)    
Model     7   2202.1 1.4409  0.001 ***
Residual  9   1965.0                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    11   2325.1 0.9679   0.78
Residual  9   1965.4              

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)  
Model    12  2514.52 1.2765  0.067 .
Residual  6   984.93                
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 6`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     8  3157.73 1.0853  0.301
Residual  2   727.37              

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    17   1768.9 1.0387  0.378
Residual 16   1602.7              

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     9   1591.6 1.1284  0.112
Residual 12   1880.6              

$`Month 3`
$`Month 3`$r.squared
[1] 0.5284538

$`Month 3`$adj.r.squared
[1] 0.1616956


$`Month 4`
$`Month 4`$r.squared
[1] 0.5419148

$`Month 4`$adj.r.squared
[1] -0.01796718


$`Month 5`
$`Month 5`$r.squared
[1] 0.7185464

$`Month 5`$adj.r.squared
[1] 0.1556391


$`Month 6`
$`Month 6`$r.squared
[1] 0.8127802

$`Month 6`$adj.r.squared
[1] 0.06390119


$`Month 7`
$`Month 7`$r.squared
[1] 0.5246381

$`Month 7`$adj.r.squared
[1] 0.01956616


$`Month 8`
$`Month 8`$r.squared
[1] 0.4583837

$`Month 8`$adj.r.squared
[1] 0.05217144


[1] "Testing with partial RDA (fraction [a]) - non-core OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4.167e+03  1.000e+00     
Conditional   2.335e+03  5.603e-01    8
Constrained   1.528e+03  3.667e-01    6
Unconstrained 3.042e+02  7.299e-02    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6 
422.1 297.7 252.0 244.1 242.3  69.8 

Eigenvalues for unconstrained axes:
   PC1    PC2 
235.51  68.64 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4290.5292     1.0000     
Conditional   2545.8616     0.5934   11
Constrained   1744.6676     0.4066    9
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9 
245.95 244.54 222.21 203.97 196.29 186.03 168.92 148.97 127.79 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear + Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3.499e+03  1.000e+00     
Conditional   1.031e+03  2.947e-01    5
Constrained   2.222e+03  6.350e-01   12
Unconstrained 2.459e+02  7.028e-02    1
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
520.0 375.5 259.2 233.5 179.9 143.0 125.5 112.2  96.1  87.1  65.4  24.8 

Eigenvalues for unconstrained axes:
   PC1 
245.95 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3885.0912     1.0000     
Conditional   2029.8974     0.5225    5
Constrained   1855.1938     0.4775    5
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5 
621.9 393.1 346.1 301.6 192.4 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3371.6249     1.0000     
Conditional   1929.8198     0.5724   16
Constrained   1441.8051     0.4276   17
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
192.31 160.53 127.69 119.09 109.73 104.29 100.08  81.08  76.24  72.37  63.12 
 RDA12  RDA13  RDA14  RDA15  RDA16  RDA17 
 53.32  48.96  45.27  31.63  29.19  26.92 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3.472e+03  1.000e+00     
Conditional   1.770e+03  5.097e-01   10
Constrained   1.400e+03  4.031e-01    9
Unconstrained 3.030e+02  8.726e-02    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9 
308.40 244.83 179.75 169.10 137.96  98.18  93.45  85.72  82.20 

Eigenvalues for unconstrained axes:
   PC1    PC2 
163.96 139.02 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     6  1528.02 1.6746  0.138
Residual  2   304.15              

$`Month 4`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     9   1744.7         
Residual  0      0.0         

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance     F Pr(>F)
Model    12  2222.29 0.753  0.799
Residual  1   245.95             

$`Month 6`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     5   1855.2         
Residual  0      0.0         

$`Month 7`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model    17   1441.8         
Residual  0      0.0         

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     9  1399.59 1.0266  0.515
Residual  2   302.97              

$`Month 3`
$`Month 3`$r.squared
[1] 0.3666853

$`Month 3`$adj.r.squared
[1] 0.2954391


$`Month 4`
$`Month 4`$r.squared
[1] 0.4066323

$`Month 4`$adj.r.squared
[1] NA


$`Month 5`
$`Month 5`$r.squared
[1] 0.6350399

$`Month 5`$adj.r.squared
[1] -0.2884736


$`Month 6`
$`Month 6`$r.squared
[1] 0.4775162

$`Month 6`$adj.r.squared
[1] NA


$`Month 7`
$`Month 7`$r.squared
[1] 0.4276292

$`Month 7`$adj.r.squared
[1] NA


$`Month 8`
$`Month 8`$r.squared
[1] 0.4030881

$`Month 8`$adj.r.squared
[1] 0.01991227


[1] "Spatial variables - non-core OTU"
Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.1206522083
+ PCNM1          0.0375774992
+ PCNM6          0.0132647797
+ PCNM3          0.0127345312
+ PCNM5          0.0059296496
+ PCNM4          0.0052558703
+ PCNM7          0.0004962060
+ PCNM2          0.0000375301
<none>           0.0000000000
+ PCNM8         -0.0109482218

        Df    AIC      F Pr(>F)   
+ PCNM1  1 142.92 1.6247  0.006 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.0375775 
Call: x ~ PCNM1 
 
                R2.adjusted
<All variables>  0.12065221
+ PCNM6          0.05447387
+ PCNM3          0.05390575
+ PCNM5          0.04661480
+ PCNM4          0.04589290
+ PCNM7          0.04079326
+ PCNM2          0.04030182
<none>           0.03757750
+ PCNM8          0.02853137

        Df    AIC     F Pr(>F)  
+ PCNM6  1 143.44 1.268  0.078 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.0963727686
+ PCNM4          0.0203819670
+ PCNM1          0.0161932615
+ PCNM2          0.0096506684
+ PCNM9          0.0064860910
+ PCNM10         0.0045523348
+ PCNM3          0.0013370124
+ PCNM11         0.0003573428
<none>           0.0000000000
+ PCNM8         -0.0012267146
+ PCNM7         -0.0015909196
+ PCNM5         -0.0045329282
+ PCNM6         -0.0059578567

        Df    AIC      F Pr(>F)   
+ PCNM4  1 177.11 1.4161  0.004 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.02038197 
Call: x ~ PCNM4 
 
                R2.adjusted
<All variables>  0.09637277
+ PCNM1          0.03860719
+ PCNM2          0.03170112
+ PCNM9          0.02836073
+ PCNM10         0.02631954
+ PCNM3          0.02292559
+ PCNM11         0.02189149
<none>           0.02038197
+ PCNM8          0.02021943
+ PCNM7          0.01983499
+ PCNM5          0.01672954
+ PCNM6          0.01522545

        Df    AIC      F Pr(>F)   
+ PCNM1  1 177.58 1.3602  0.004 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03860719 
Call: x ~ PCNM4 + PCNM1 
 
                R2.adjusted
<All variables>  0.09637277
+ PCNM2          0.05166424
+ PCNM9          0.04812736
+ PCNM10         0.04596610
+ PCNM3          0.04237250
+ PCNM11         0.04127758
+ PCNM8          0.03950716
+ PCNM7          0.03910011
<none>           0.03860719
+ PCNM5          0.03581198
+ PCNM6          0.03421942

        Df   AIC      F Pr(>F)  
+ PCNM2  1 178.1 1.2478  0.016 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.05166424 
Call: x ~ PCNM4 + PCNM1 + PCNM2 
 
                R2.adjusted
<All variables>  0.09637277
+ PCNM9          0.06259549
+ PCNM10         0.06029915
+ PCNM3          0.05648095
+ PCNM11         0.05531760
+ PCNM8          0.05343653
+ PCNM7          0.05300404
<none>           0.05166424
+ PCNM5          0.04951040
+ PCNM6          0.04781830

        Df    AIC      F Pr(>F)
+ PCNM9  1 178.58 1.1982   0.12

Step: R2.adj= 0 
Call: x ~ 1 
 
                 R2.adjusted
+ PCNM3          0.032951833
<All variables>  0.023400724
+ PCNM2          0.001459937
<none>           0.000000000
+ PCNM1         -0.003077573
+ PCNM4         -0.004281676
+ PCNM5         -0.009157850

Step: R2.adj= 0 
Call: x ~ 1 
 
                R2.adjusted
<All variables>  0.04496769
+ PCNM5          0.02465943
+ PCNM4          0.01580298
+ PCNM2          0.01058546
<none>           0.00000000
+ PCNM3         -0.01047239
+ PCNM1         -0.01559342

        Df    AIC      F Pr(>F)
+ PCNM5  1 92.432 1.2528  0.186

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.1698963492
+ PCNM3          0.0377280414
+ PCNM1          0.0274431478
+ PCNM12         0.0215946283
+ PCNM15         0.0164438888
+ PCNM7          0.0073514861
+ PCNM6          0.0049534597
+ PCNM2          0.0030548811
+ PCNM8          0.0029710491
+ PCNM4          0.0002269566
<none>           0.0000000000
+ PCNM14        -0.0003197951
+ PCNM10        -0.0005279756
+ PCNM5         -0.0020540868
+ PCNM13        -0.0042163381
+ PCNM16        -0.0057694618
+ PCNM9         -0.0087185009
+ PCNM11        -0.0099039450

        Df    AIC      F Pr(>F)   
+ PCNM3  1 276.82 2.2938  0.004 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03772804 
Call: x ~ PCNM3 
 
                R2.adjusted
<All variables>  0.16989635
+ PCNM1          0.06727349
+ PCNM12         0.06123630
+ PCNM15         0.05591941
+ PCNM7          0.04653371
+ PCNM6          0.04405832
+ PCNM2          0.04209850
+ PCNM8          0.04201196
+ PCNM4          0.03917935
+ PCNM14         0.03861496
+ PCNM10         0.03840007
<none>           0.03772804
+ PCNM5          0.03682473
+ PCNM13         0.03459273
+ PCNM16         0.03298950
+ PCNM9          0.02994533
+ PCNM11         0.02872165

        Df    AIC      F Pr(>F)   
+ PCNM1  1 276.68 2.0136  0.002 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.06727349 
Call: x ~ PCNM3 + PCNM1 
 
                R2.adjusted
<All variables>  0.16989635
+ PCNM12         0.09255021
+ PCNM15         0.08705608
+ PCNM7          0.07735752
+ PCNM6          0.07479963
+ PCNM2          0.07277447
+ PCNM8          0.07268505
+ PCNM4          0.06975802
+ PCNM14         0.06917482
+ PCNM10         0.06895276
+ PCNM5          0.06732491
<none>           0.06727349
+ PCNM13         0.06501851
+ PCNM16         0.06336184
+ PCNM9          0.06021620
+ PCNM11         0.05895173

         Df    AIC      F Pr(>F)  
+ PCNM12  1 276.63 1.8635  0.012 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.09255021 
Call: x ~ PCNM3 + PCNM1 + PCNM12 
 
                R2.adjusted
<All variables>  0.16989635
+ PCNM15         0.11388657
+ PCNM7          0.10385358
+ PCNM6          0.10120748
+ PCNM2          0.09911249
+ PCNM8          0.09901999
+ PCNM4          0.09599203
+ PCNM14         0.09538871
+ PCNM10         0.09515900
+ PCNM5          0.09347501
<none>           0.09255021
+ PCNM13         0.09108908
+ PCNM16         0.08937529
+ PCNM9          0.08612118
+ PCNM11         0.08481310

         Df    AIC      F Pr(>F)  
+ PCNM15  1 276.67 1.7224  0.018 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.1138866 
Call: x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 
 
                R2.adjusted
<All variables>   0.1698963
+ PCNM7           0.1263556
+ PCNM6           0.1236150
+ PCNM2           0.1214452
+ PCNM8           0.1213494
+ PCNM4           0.1182133
+ PCNM14          0.1175885
+ PCNM10          0.1173505
+ PCNM5           0.1156064
<none>            0.1138866
+ PCNM13          0.1131353
+ PCNM16          0.1113603
+ PCNM9           0.1079899
+ PCNM11          0.1066352

        Df    AIC      F Pr(>F)  
+ PCNM7  1 276.99 1.4139  0.058 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.0638861234
+ PCNM4          0.0176560145
+ PCNM2          0.0149929300
+ PCNM6          0.0130586339
+ PCNM1          0.0089085575
+ PCNM5          0.0051039864
+ PCNM3          0.0009593225
<none>           0.0000000000
+ PCNM8         -0.0015744865
+ PCNM9         -0.0046774252
+ PCNM7         -0.0059095188
+ PCNM10        -0.0133806464

        Df    AIC      F Pr(>F)
+ PCNM4  1 180.87 1.3774   0.13

$`Month 3`
Call: rda(formula = x ~ PCNM1, data = data)

                Inertia Proportion Rank
Total         4.167e+03  1.000e+00     
Constrained   4.072e+02  9.773e-02    1
Unconstrained 3.760e+03  9.023e-01   15
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1 
407.2 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12  PC13 
567.1 407.2 317.4 276.5 272.0 263.1 261.4 254.6 245.2 232.9 228.8 199.7 102.5 
 PC14  PC15 
 78.3  53.1 


$`Month 4`
Call: rda(formula = x ~ PCNM4 + PCNM1 + PCNM2, data = data)

                Inertia Proportion Rank
Total         4290.5292     1.0000     
Constrained    831.9963     0.1939    3
Unconstrained 3458.5329     0.8061   17
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3 
365.8 257.5 208.7 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
326.8 269.1 250.4 236.1 222.4 218.9 215.2 208.4 
(Showing 8 of 17 unconstrained eigenvalues)


$`Month 5`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3500     
Unconstrained    3500   18
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
702.6 424.4 299.5 282.7 270.3 231.3 215.4 210.5 
(Showing 8 of 18 unconstrained eigenvalues)


$`Month 6`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3885     
Unconstrained    3885   10
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10 
738.3 525.2 488.5 412.6 386.1 364.2 342.9 314.4 211.4 101.5 


$`Month 7`
Call: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15, data = data)

                Inertia Proportion Rank
Total         3371.6249     1.0000     
Constrained    746.1212     0.2213    4
Unconstrained 2625.5037     0.7787   29
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4 
406.7 134.9 117.5  87.0 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 
255.98 191.20 157.65 148.83 144.53 134.83 124.11 120.33 
(Showing 8 of 29 unconstrained eigenvalues)


$`Month 8`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3472     
Unconstrained    3472   21
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
531.9 284.1 249.8 241.4 195.9 191.6 184.5 176.3 
(Showing 8 of 21 unconstrained eigenvalues)


[1] "Summary of spatial selection process - non-core OTU"
$`Month 3`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM1         0.037577  1 142.92 1.6247  0.006 **
<All variables> 0.120652                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM4         0.020382  1 177.11 1.4161  0.004 **
+ PCNM1         0.038607  1 177.58 1.3602  0.004 **
+ PCNM2         0.051664  1 178.10 1.2478  0.016 * 
<All variables> 0.096373                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 5`
NULL

$`Month 6`
NULL

$`Month 7`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM3         0.037728  1 276.82 2.2938  0.004 **
+ PCNM1         0.067273  1 276.68 2.0136  0.002 **
+ PCNM12        0.092550  1 276.63 1.8635  0.012 * 
+ PCNM15        0.113887  1 276.67 1.7224  0.018 * 
<All variables> 0.169896                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
NULL

[1] "ANOVA on full spatial selection - non-core OTU"
$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM1, data = data)
         Df Variance      F Pr(>F)   
Model     1    407.2 1.6247  0.007 **
Residual 15   3759.9                 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM4 + PCNM1 + PCNM2, data = data)
         Df Variance      F Pr(>F)    
Model     3    832.0 1.3632  0.001 ***
Residual 17   3458.5                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 5`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 18   3499.5          

$`Month 6`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 10   3885.1          

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15, data = data)
         Df Variance      F Pr(>F)    
Model     4   746.12 2.0603  0.001 ***
Residual 29  2625.50                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 21   3472.2          

[1] "Partition Bray-Curtis dissimilarities - non-core OTUs"
Warning messages:
1: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
2: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
3: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
4: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
5: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
6: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 5.0775 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            7   0.21798      -0.39026     TRUE
[b+c] = X2            8   0.12283      -0.75433     TRUE
[a+b+c] = X1+X2      14   0.58655      -2.30761     TRUE
Individual fractions                                    
[a] = X1|X2           6                -1.55328     TRUE
[b]                   0                 1.16302    FALSE
[c] = X2|X1           7                -1.91735     TRUE
[d] = Residuals                         3.30761    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 4`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 2.9883 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.59915       0.10922     TRUE
[b+c] = X2           11   0.66551       0.25669     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 5`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 33.29 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           12   0.26025      -1.21925     TRUE
[b+c] = X2            5   0.22065      -0.07911     TRUE
[a+b+c] = X1+X2      17   0.99357       0.88427     TRUE
Individual fractions                                    
[a] = X1|X2          12                 0.96338     TRUE
[b]                   0                -2.18263    FALSE
[c] = X2|X1           5                 2.10353     TRUE
[d] = Residuals                         0.11573    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 6`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 10.393 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.78139      -0.09305     TRUE
[b+c] = X2            5   0.58922       0.17843     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           5                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           2                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 7`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 58.524 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           17   0.49135      -0.04908     TRUE
[b+c] = X2           16   0.43530      -0.09618     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          17                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          16                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 8`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 27.561 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            9   0.44622       0.03089     TRUE
[b+c] = X2           10   0.51747       0.07880     TRUE
[a+b+c] = X1+X2      19   0.93709       0.33943     TRUE
Individual fractions                                    
[a] = X1|X2           9                 0.26063     TRUE
[b]                   0                -0.22974    FALSE
[c] = X2|X1          10                 0.30854     TRUE
[d] = Residuals                         0.66057    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
Warning message:
In rm(abFrac, aFrac, abFrac0, pcnm_df, bcFrac, bcFrac0, step.space) :
  object 'abFrac0' not found
[1] "Analysis for All OTUs"
[1] "Variance partitioning - All OTUs"
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[1L]], X = dots[[2L]][[1L]], ~., data = dots[[3L]][[1L]])

Explanatory tables:
X1:  dots[[2L]][[1L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 73269 
            Variance: 4579.3 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.55612       0.11224     TRUE
[b+c] = X2            7   0.53099       0.16621     TRUE
[a+b+c] = X1+X2      14   0.92003       0.36027     TRUE
Individual fractions                                    
[a] = X1|X2           7                 0.19406     TRUE
[b]                   0                -0.08182    FALSE
[c] = X2|X1           6                 0.24803     TRUE
[d] = Residuals                         0.63973    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 4`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[2L]], X = dots[[2L]][[2L]], ~., data = dots[[3L]][[2L]])

Explanatory tables:
X1:  dots[[2L]][[2L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 93330 
            Variance: 4666.5 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.59208       0.09350     TRUE
[b+c] = X2           11   0.54175      -0.01833     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 5`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[3L]], X = dots[[2L]][[3L]], ~., data = dots[[3L]][[3L]])

Explanatory tables:
X1:  dots[[2L]][[3L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 69679 
            Variance: 3871.1 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.29072       0.01793     TRUE
[b+c] = X2           12   0.71941       0.15824     TRUE
[a+b+c] = X1+X2      17   0.93027      -0.25520     TRUE
Individual fractions                                    
[a] = X1|X2           5                -0.41343     TRUE
[b]                   0                 0.43136    FALSE
[c] = X2|X1          12                -0.27312     TRUE
[d] = Residuals                         1.25520    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 6`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[4L]], X = dots[[2L]][[4L]], ~., data = dots[[3L]][[4L]])

Explanatory tables:
X1:  dots[[2L]][[4L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 41860 
            Variance: 4186 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            5   0.52037       0.04074     TRUE
[b+c] = X2            8   0.81455       0.07274     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           2                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           5                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 7`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[5L]], X = dots[[2L]][[5L]], ~., data = dots[[3L]][[5L]])

Explanatory tables:
X1:  dots[[2L]][[5L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 119918 
            Variance: 3633.9 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           16   0.56926       0.16387     TRUE
[b+c] = X2           17   0.52493       0.02017     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          16                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          17                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

$`Month 8`

Partition of variance in RDA 

Call: (function (Y, X, ..., data, chisquare = FALSE, transfo, scale =
FALSE, add = FALSE, sqrt.dist = FALSE, permutations = 1000) { if
(missing(data)) data <- parent.frame() X <- list(X, ...)  if
((length(X) < 2 || length(X) > 4)) stop("needs two to four explanatory
tables") if (inherits(Y, "dist")) { inert <- attr(Y, "method") inert <-
paste(paste0(toupper(substring(inert, 1, 1)), substring(inert, 2)),
"distance") if (sqrt.dist) Y <- sqrt(Y) else inert <- paste("squared",
inert) if (is.logical(add) && isTRUE(add)) add <- "lingoes" if
(is.character(add)) { add <- match.arg(add, c("lingoes", "cailliez"))
if (add == "lingoes") { ac <- addLingoes(as.matrix(Y)) Y <- sqrt(Y^2 +
2 * ac) } else if (add == "cailliez") { ac <- addCailliez(as.matrix(Y))
Y <- Y + ac } if (ac > sqrt(.Machine$double.eps)) inert <-
paste(paste0(toupper(substring(add, 1, 1)), substring(add, 2)),
"adjusted", inert) } RDA <- "dbRDA" if (!missing(transfo) ||
!missing(scale)) message("arguments 'transfo' and 'scale' are ignored
with distances") } else if (chisquare) { inert = "Chi-square" RDA =
"CCA" permutations = getPermuteMatrix(permutations, nrow(Y)) } else {
inert <- "variance" RDA <- "RDA" if (!missing(transfo)) { Y <-
decostand(Y, transfo) transfo <- attr(Y, "decostand") } if
(!missing(transfo) && (is.null(dim(Y)) || ncol(Y) == 1))
warning("transformations are probably meaningless with a single
variable") if (scale && !missing(transfo)) warning("Y should not be
both transformed and scaled (standardized)") Y <- scale(Y, center =
TRUE, scale = scale) } Sets <- list() for (i in seq_along(X)) { if
(is.data.frame(X[[i]]) || is.factor(X[[i]])) { mf <-
as.data.frame(X[[i]]) mf <- model.matrix(~., mf) Sets[[i]] <- mf[, -1,
drop = FALSE] } else if (inherits(X[[i]], "formula")) { mf <-
model.frame(X[[i]], data, na.action = na.fail, drop.unused.levels =
TRUE) trms <- attr(mf, "terms") Sets[[i]] <- model.matrix(trms, mf) if
(any(colnames(Sets[[i]]) == "(Intercept)")) { xint <-
which(colnames(Sets[[i]]) == "(Intercept)") Sets[[i]] <- (Sets[[i]])[,
-xint, drop = FALSE] } } else Sets[[i]] <- as.matrix(X[[i]]) Sets[[i]]
<- scale(Sets[[i]], center = TRUE, scale = TRUE) } out <- list()
out$part <- switch(length(Sets), NULL, varpart2(Y, Sets[[1]],
Sets[[2]], chisquare, permutations), varpart3(Y, Sets[[1]], Sets[[2]],
Sets[[3]], chisquare, permutations), varpart4(Y, Sets[[1]], Sets[[2]],
Sets[[3]], Sets[[4]], chisquare, permutations)) if (inherits(Y,
"dist")) { out$part$ordination <- "dbrda" } else { if (chisquare)
out$part$ordination <- "cca" else { out$part$ordination <- "rda" } } if
(RDA == "RDA") { out$scale <- scale if (!missing(transfo)) out$transfo
<- transfo } else { if (scale || !missing(transfo)) message("arguments
'scale' and 'transfo' ignored: valid only in RDA") } out$inert <- inert
out$RDA <- RDA out$call <- match.call() mx <- rep(" ", length(X)) for
(i in seq_along(X)) mx[i] <- deparse(out$call[[i + 2]], width.cutoff =
500) out$tables <- mx class(out) <- c("varpart", class(out)) out })(Y =
dots[[1L]][[6L]], X = dots[[2L]][[6L]], ~., data = dots[[3L]][[6L]])

Explanatory tables:
X1:  dots[[2L]][[6L]]
X2:  ~. 

No. of explanatory tables: 2 
Total variation (SS): 77483 
            Variance: 3689.7 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           10   0.51065       0.06578     TRUE
[b+c] = X2            9   0.45617       0.04830     TRUE
[a+b+c] = X1+X2      19   0.91294       0.08584     TRUE
Individual fractions                                    
[a] = X1|X2          10                 0.03754     TRUE
[b]                   0                 0.02824    FALSE
[c] = X2|X1           9                 0.02006     TRUE
[d] = Residuals                         0.91416    FALSE
---
Use function ‘rda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
[1] "Testing with RDA (full model) - all OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

               Inertia Proportion Rank
Total         4579.326      1.000     
Constrained   2431.596      0.531    7
Unconstrained 2147.729      0.469    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7 
702.4 369.7 338.1 293.6 271.3 269.2 187.2 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
381.6 334.9 293.3 280.7 256.4 244.2 174.8 113.1  68.8 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4666.4799     1.0000     
Constrained   2528.0730     0.5418   11
Unconstrained 2138.4068     0.4582    9
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 
327.6 311.9 265.4 241.2 235.6 218.4 207.4 198.2 185.5 177.7 159.0 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9 
375.5 276.5 264.4 240.5 226.2 209.3 190.8 183.3 172.0 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear, data = data)

                Inertia Proportion Rank
Total         3871.0677     1.0000     
Constrained   2784.8924     0.7194   12
Unconstrained 1086.1753     0.2806    6
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
738.8 431.9 314.5 257.1 233.5 186.1 162.4 145.7 112.0  89.5  64.8  48.6 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6 
315.99 266.38 208.93 140.87  99.58  54.43 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         4186.0472     1.0000     
Constrained   3409.7378     0.8145    8
Unconstrained  776.3095     0.1855    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8 
729.9 517.9 510.3 439.2 388.4 363.1 311.8 149.2 

Eigenvalues for unconstrained axes:
  PC1   PC2 
394.1 382.2 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3633.8848     1.0000     
Constrained   1907.5342     0.5249   17
Unconstrained 1726.3506     0.4751   16
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 RDA13 
317.9 192.8 155.1 137.5 120.5 118.6 112.4 102.7  97.7  90.6  87.7  82.9  77.7 
RDA14 RDA15 RDA16 RDA17 
 62.1  59.4  55.1  36.8 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12  PC13 
348.2 161.0 151.5 136.4 129.3 124.9 100.6  93.3  80.8  75.0  70.8  65.7  56.6 
 PC14  PC15  PC16 
 49.0  43.7  39.5 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear,
data = data)

                Inertia Proportion Rank
Total         3689.6784     1.0000     
Constrained   1683.1234     0.4562    9
Unconstrained 2006.5550     0.5438   12
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
372.1 256.4 198.2 180.1 173.5 138.8 131.0 119.5 113.6 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12 
321.0 264.8 224.3 185.5 173.8 167.6 150.6 125.4 114.7 110.6  96.4  71.9 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)    
Model     7   2431.6 1.4556  0.001 ***
Residual  9   2147.7                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model    11   2528.1 0.9673  0.786
Residual  9   2138.4              

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance     F Pr(>F)  
Model    12   2784.9 1.282   0.05 *
Residual  6   1086.2               
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 6`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     8   3409.7 1.0981  0.282
Residual  2    776.3              

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance    F Pr(>F)
Model    17   1907.5 1.04   0.33
Residual 16   1726.3            

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear, data = data)
         Df Variance      F Pr(>F)
Model     9   1683.1 1.1184  0.112
Residual 12   2006.6              

$`Month 3`
$`Month 3`$r.squared
[1] 0.5309944

$`Month 3`$adj.r.squared
[1] 0.1662123


$`Month 4`
$`Month 4`$r.squared
[1] 0.5417516

$`Month 4`$adj.r.squared
[1] -0.01832974


$`Month 5`
$`Month 5`$r.squared
[1] 0.719412

$`Month 5`$adj.r.squared
[1] 0.1582359


$`Month 6`
$`Month 6`$r.squared
[1] 0.8145483

$`Month 6`$adj.r.squared
[1] 0.07274164


$`Month 7`
$`Month 7`$r.squared
[1] 0.5249297

$`Month 7`$adj.r.squared
[1] 0.02016759


$`Month 8`
$`Month 8`$r.squared
[1] 0.4561708

$`Month 8`$adj.r.squared
[1] 0.04829882


[1] "Testing with partial RDA (fraction [a]) - all OTUS"
$`Month 3`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4.579e+03  1.000e+00     
Conditional   2.547e+03  5.561e-01    8
Constrained   1.666e+03  3.639e-01    6
Unconstrained 3.662e+02  7.997e-02    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6 
476.2 319.8 270.1 260.0 257.0  83.4 

Eigenvalues for unconstrained axes:
   PC1    PC2 
291.87  74.32 


$`Month 4`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4666.4799     1.0000     
Conditional   2762.9067     0.5921   11
Constrained   1903.5732     0.4079    9
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9 
276.45 267.51 243.33 220.33 212.19 199.98 181.77 163.11 138.90 


$`Month 5`
Call: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate +
BirthYear + Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3.871e+03  1.000e+00     
Conditional   1.125e+03  2.907e-01    5
Constrained   2.476e+03  6.395e-01   12
Unconstrained 2.699e+02  6.973e-02    1
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 RDA10 RDA11 RDA12 
596.0 407.4 287.4 262.3 194.6 161.9 136.2 121.6 104.7  99.3  74.9  29.3 

Eigenvalues for unconstrained axes:
   PC1 
269.94 


$`Month 6`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         4186.0472     1.0000     
Conditional   2178.2934     0.5204    5
Constrained   2007.7538     0.4796    5
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5 
662.5 420.5 377.2 333.9 213.6 


$`Month 7`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3633.8848     1.0000     
Conditional   2068.6428     0.5693   16
Constrained   1565.2419     0.4307   17
Unconstrained    0.0000     0.0000    0
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
  RDA1   RDA2   RDA3   RDA4   RDA5   RDA6   RDA7   RDA8   RDA9  RDA10  RDA11 
204.14 179.31 137.70 127.08 116.94 114.66 108.33  92.11  82.73  79.66  68.54 
 RDA12  RDA13  RDA14  RDA15  RDA16  RDA17 
 57.69  51.45  48.13  35.73  31.80  29.23 


$`Month 8`
Call: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear
+ Condition(scores(y)), data = data)

                Inertia Proportion Rank
Total         3.690e+03  1.000e+00     
Conditional   1.884e+03  5.107e-01   10
Constrained   1.484e+03  4.023e-01    9
Unconstrained 3.212e+02  8.706e-02    2
Inertia is variance 
Some constraints were aliased because they were collinear (redundant)

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5  RDA6  RDA7  RDA8  RDA9 
321.7 253.9 193.2 185.7 146.0 105.8  99.9  91.3  86.7 

Eigenvalues for unconstrained axes:
   PC1    PC2 
174.64 146.59 


$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     6  1666.48 1.5169  0.184
Residual  2   366.19              

$`Month 4`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     9   1903.6         
Residual  0      0.0         

$`Month 5`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Sex + Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model    12  2475.71 0.7643  0.793
Residual  1   269.94              

$`Month 6`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model     5   2007.8         
Residual  0      0.0         

$`Month 7`
No residual component

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance F Pr(>F)
Model    17   1565.2         
Residual  0      0.0         

$`Month 8`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ Age + Squirrel.ID + CollectionDate + BirthYear + Condition(scores(y)), data = data)
         Df Variance      F Pr(>F)
Model     9  1484.32 1.0268  0.493
Residual  2   321.23              

$`Month 3`
$`Month 3`$r.squared
[1] 0.3639136

$`Month 3`$adj.r.squared
[1] 0.2480305


$`Month 4`
$`Month 4`$r.squared
[1] 0.4079249

$`Month 4`$adj.r.squared
[1] NA


$`Month 5`
$`Month 5`$r.squared
[1] 0.6395422

$`Month 5`$adj.r.squared
[1] -0.2731223


$`Month 6`
$`Month 6`$r.squared
[1] 0.47963

$`Month 6`$adj.r.squared
[1] NA


$`Month 7`
$`Month 7`$r.squared
[1] 0.4307352

$`Month 7`$adj.r.squared
[1] NA


$`Month 8`
$`Month 8`$r.squared
[1] 0.4022899

$`Month 8`$adj.r.squared
[1] 0.02006033


[1] "Forward selection for parsimonious model - all OTUs"
[1] "Spatial variables - all OTU"
Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  1.122406e-01
+ PCNM1          3.887950e-02
+ PCNM6          1.376787e-02
+ PCNM3          1.068361e-02
+ PCNM5          5.579341e-03
+ PCNM4          3.615385e-03
+ PCNM2          2.385579e-05
<none>           0.000000e+00
+ PCNM7         -2.697265e-03
+ PCNM8         -9.990662e-03

        Df   AIC      F Pr(>F)   
+ PCNM1  1 144.5 1.6472   0.01 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.0388795 
Call: x ~ PCNM1 
 
                R2.adjusted
<All variables>  0.11224056
+ PCNM6          0.05640789
+ PCNM3          0.05310333
+ PCNM5          0.04763447
+ PCNM4          0.04553023
+ PCNM2          0.04168217
<none>           0.03887950
+ PCNM7          0.03876668
+ PCNM8          0.03095233

        Df    AIC      F Pr(>F)  
+ PCNM6  1 145.01 1.2786  0.082 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  9.350030e-02
+ PCNM4          1.860456e-02
+ PCNM1          1.620305e-02
+ PCNM2          8.261223e-03
+ PCNM9          5.362398e-03
+ PCNM10         3.922854e-03
+ PCNM11         1.631505e-03
+ PCNM3          1.211986e-03
+ PCNM7          3.734544e-05
<none>           0.000000e+00
+ PCNM8         -1.331243e-03
+ PCNM5         -3.804266e-03
+ PCNM6         -5.809799e-03

        Df    AIC      F Pr(>F)   
+ PCNM4  1 178.91 1.3791  0.006 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.01860456 
Call: x ~ PCNM4 
 
                R2.adjusted
<All variables>  0.09350030
+ PCNM1          0.03674137
+ PCNM2          0.02835833
+ PCNM9          0.02529846
+ PCNM10         0.02377894
+ PCNM11         0.02136030
+ PCNM3          0.02091747
+ PCNM7          0.01967757
<none>           0.01860456
+ PCNM8          0.01823295
+ PCNM5          0.01562254
+ PCNM6          0.01350559

        Df    AIC      F Pr(>F)   
+ PCNM1  1 179.39 1.3577  0.004 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03674137 
Call: x ~ PCNM4 + PCNM1 
 
                R2.adjusted
<All variables>  0.09350030
+ PCNM2          0.04813575
+ PCNM9          0.04489589
+ PCNM10         0.04328699
+ PCNM11         0.04072607
+ PCNM3          0.04025720
+ PCNM7          0.03894436
+ PCNM8          0.03741476
<none>           0.03674137
+ PCNM5          0.03465080
+ PCNM6          0.03240932

        Df    AIC      F Pr(>F)  
+ PCNM2  1 179.94 1.2155  0.056 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
+ PCNM3          0.0293144184
<All variables>  0.0179265290
<none>           0.0000000000
+ PCNM2         -0.0003257545
+ PCNM1         -0.0030551293
+ PCNM4         -0.0035203640
+ PCNM5         -0.0087046484

Step: R2.adj= 0 
Call: x ~ 1 
 
                R2.adjusted
<All variables>  0.04074002
+ PCNM5          0.02351246
+ PCNM4          0.01567226
+ PCNM2          0.01264249
<none>           0.00000000
+ PCNM3         -0.01254662
+ PCNM1         -0.01664725

        Df    AIC      F Pr(>F)
+ PCNM5  1 93.266 1.2408    0.2

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  1.638670e-01
+ PCNM3          3.658131e-02
+ PCNM1          2.691667e-02
+ PCNM12         2.140828e-02
+ PCNM15         1.544116e-02
+ PCNM7          7.038207e-03
+ PCNM6          4.467816e-03
+ PCNM2          3.385334e-03
+ PCNM8          3.129966e-03
<none>           0.000000e+00
+ PCNM4         -4.459353e-05
+ PCNM10        -1.026609e-03
+ PCNM14        -1.167639e-03
+ PCNM5         -2.214187e-03
+ PCNM13        -3.779880e-03
+ PCNM16        -5.961513e-03
+ PCNM9         -8.161063e-03
+ PCNM11        -8.958883e-03

        Df    AIC     F Pr(>F)   
+ PCNM3  1 279.41 2.253  0.004 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.03658131 
Call: x ~ PCNM3 
 
                R2.adjusted
<All variables>  0.16386704
+ PCNM1          0.06554630
+ PCNM12         0.05986022
+ PCNM15         0.05370061
+ PCNM7          0.04502660
+ PCNM6          0.04237329
+ PCNM2          0.04125589
+ PCNM8          0.04099228
+ PCNM4          0.03771532
+ PCNM10         0.03670162
<none>           0.03658131
+ PCNM14         0.03655604
+ PCNM5          0.03547574
+ PCNM13         0.03385954
+ PCNM16         0.03160753
+ PCNM9          0.02933703
+ PCNM11         0.02851347

        Df    AIC      F Pr(>F)   
+ PCNM1  1 279.29 1.9919  0.002 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.0655463 
Call: x ~ PCNM3 + PCNM1 
 
                R2.adjusted
<All variables>  0.16386704
+ PCNM12         0.09056667
+ PCNM15         0.08420174
+ PCNM7          0.07523860
+ PCNM6          0.07249685
+ PCNM2          0.07134220
+ PCNM8          0.07106981
+ PCNM4          0.06768361
+ PCNM10         0.06663613
+ PCNM14         0.06648569
<none>           0.06554630
+ PCNM5          0.06536938
+ PCNM13         0.06369930
+ PCNM16         0.06137223
+ PCNM9          0.05902604
+ PCNM11         0.05817503

         Df    AIC      F Pr(>F)   
+ PCNM12  1 279.25 1.8529  0.006 **
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.09056667 
Call: x ~ PCNM3 + PCNM1 + PCNM12 
 
                R2.adjusted
<All variables>  0.16386704
+ PCNM15         0.11072818
+ PCNM7          0.10145596
+ PCNM6          0.09861966
+ PCNM2          0.09742520
+ PCNM8          0.09714342
+ PCNM4          0.09364045
+ PCNM10         0.09255685
+ PCNM14         0.09240123
+ PCNM5          0.09124642
<none>           0.09056667
+ PCNM13         0.08951876
+ PCNM16         0.08711144
+ PCNM9          0.08468435
+ PCNM11         0.08380400

         Df    AIC      F Pr(>F)  
+ PCNM15  1 279.34 1.6802   0.02 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.1107282 
Call: x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 
 
                R2.adjusted
<All variables>   0.1638670
+ PCNM7           0.1227264
+ PCNM6           0.1197888
+ PCNM2           0.1185517
+ PCNM8           0.1182599
+ PCNM4           0.1146318
+ PCNM10          0.1135095
+ PCNM14          0.1133483
+ PCNM5           0.1121523
<none>            0.1107282
+ PCNM13          0.1103629
+ PCNM16          0.1078696
+ PCNM9           0.1053558
+ PCNM11          0.1044440

        Df    AIC      F Pr(>F)  
+ PCNM7  1 279.68 1.3966  0.042 *
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0.1227264 
Call: x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 + PCNM7 
 
                R2.adjusted
<All variables>   0.1638670
+ PCNM6           0.1325670
+ PCNM2           0.1312841
+ PCNM8           0.1309814
+ PCNM4           0.1272190
+ PCNM10          0.1260551
+ PCNM14          0.1258880
+ PCNM5           0.1246476
+ PCNM13          0.1227920
<none>            0.1227264
+ PCNM16          0.1202063
+ PCNM9           0.1175995
+ PCNM11          0.1166539

        Df    AIC      F Pr(>F)  
+ PCNM6  1 280.06 1.3176  0.084 .
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

Step: R2.adj= 0 
Call: x ~ 1 
 
                  R2.adjusted
<All variables>  0.0657814451
+ PCNM4          0.0190571989
+ PCNM2          0.0147303603
+ PCNM6          0.0124961039
+ PCNM1          0.0092890731
+ PCNM5          0.0048034657
+ PCNM3          0.0006040269
<none>           0.0000000000
+ PCNM8         -0.0014143245
+ PCNM9         -0.0040833698
+ PCNM7         -0.0068622960
+ PCNM10        -0.0124404435

        Df    AIC     F Pr(>F)
+ PCNM4  1 182.17 1.408  0.104

$`Month 3`
Call: rda(formula = x ~ PCNM1, data = data)

                Inertia Proportion Rank
Total         4.579e+03  1.000e+00     
Constrained   4.531e+02  9.895e-02    1
Unconstrained 4.126e+03  9.011e-01   15
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1 
453.1 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10  PC11  PC12  PC13 
650.4 427.4 342.7 311.5 296.1 289.8 283.4 274.6 261.8 248.4 247.4 231.2 111.1 
 PC14  PC15 
 88.8  61.7 


$`Month 4`
Call: rda(formula = x ~ PCNM4 + PCNM1, data = data)

                Inertia Proportion Rank
Total         4666.4799     1.0000     
Constrained    620.9555     0.1331    2
Unconstrained 4045.5243     0.8669   18
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1  RDA2 
342.8 278.1 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
365.1 328.5 282.2 270.8 251.7 242.0 234.4 233.2 
(Showing 8 of 18 unconstrained eigenvalues)


$`Month 5`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3871     
Unconstrained    3871   18
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
773.3 466.1 342.6 330.0 294.3 251.8 231.9 227.4 
(Showing 8 of 18 unconstrained eigenvalues)


$`Month 6`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            4186     
Unconstrained    4186   10
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8   PC9  PC10 
780.2 561.0 536.6 447.6 410.8 382.5 367.3 334.5 249.4 116.0 


$`Month 7`
Call: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 + PCNM7, data =
data)

                Inertia Proportion Rank
Total         3633.8848     1.0000     
Constrained    928.9905     0.2556    5
Unconstrained 2704.8943     0.7444   28
Inertia is variance 

Eigenvalues for constrained axes:
 RDA1  RDA2  RDA3  RDA4  RDA5 
424.3 163.6 130.3 117.8  93.0 

Eigenvalues for unconstrained axes:
   PC1    PC2    PC3    PC4    PC5    PC6    PC7    PC8 
262.93 207.07 165.33 159.28 152.73 149.72 133.58 126.44 
(Showing 8 of 28 unconstrained eigenvalues)


$`Month 8`
Call: rda(formula = x ~ 1, data = data)

              Inertia Rank
Total            3690     
Unconstrained    3690   21
Inertia is variance 

Eigenvalues for unconstrained axes:
  PC1   PC2   PC3   PC4   PC5   PC6   PC7   PC8 
550.4 298.2 271.7 260.3 219.3 200.8 197.1 188.2 
(Showing 8 of 21 unconstrained eigenvalues)


[1] "Summary of spatial selection process - all OTU"
$`Month 3`
                  R2.adj Df   AIC      F Pr(>F)   
+ PCNM1         0.038879  1 144.5 1.6472   0.01 **
<All variables> 0.112241                          
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM4         0.018605  1 178.91 1.3791  0.006 **
+ PCNM1         0.036741  1 179.39 1.3577  0.004 **
<All variables> 0.093500                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 5`
NULL

$`Month 6`
NULL

$`Month 7`
                  R2.adj Df    AIC      F Pr(>F)   
+ PCNM3         0.036581  1 279.41 2.2530  0.004 **
+ PCNM1         0.065546  1 279.29 1.9919  0.002 **
+ PCNM12        0.090567  1 279.25 1.8529  0.006 **
+ PCNM15        0.110728  1 279.34 1.6802  0.020 * 
+ PCNM7         0.122726  1 279.68 1.3966  0.042 * 
<All variables> 0.163867                           
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
NULL

[1] "ANOVA on full spatial selection - all OTU"
$`Month 3`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM1, data = data)
         Df Variance      F Pr(>F)   
Model     1    453.1 1.6472  0.009 **
Residual 15   4126.2                 
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 4`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM4 + PCNM1, data = data)
         Df Variance      F Pr(>F)    
Model     2    621.0 1.3814  0.001 ***
Residual 18   4045.5                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 5`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 18   3871.1          

$`Month 6`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0        0  0       
Residual 10     4186          

$`Month 7`
Permutation test for rda under reduced model
Permutation: free
Number of permutations: 999

Model: rda(formula = x ~ PCNM3 + PCNM1 + PCNM12 + PCNM15 + PCNM7, data = data)
         Df Variance      F Pr(>F)    
Model     5   928.99 1.9233  0.001 ***
Residual 28  2704.89                  
---
Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1

$`Month 8`
No constrained component

Model: rda(formula = x ~ 1, data = data)
         Df Variance  F Pr(>F)
Model     0      0.0  0       
Residual 21   3689.7          

[1] "Partition Bray-Curtis dissimilarities - all OTUs"
Warning messages:
1: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
2: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
3: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
4: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
5: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
6: In FUN(X[[i]], ...) :
  results may be meaningless because data have negative entries in method “bray”
There were 12 warnings (use warnings() to see them)
$`Month 3`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 4.9376 
No. of observations: 17 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            7   0.23666      -0.35706     TRUE
[b+c] = X2            8   0.15204      -0.69592     TRUE
[a+b+c] = X1+X2      14   0.55621      -2.55029     TRUE
Individual fractions                                    
[a] = X1|X2           6                -1.85437     TRUE
[b]                   0                 1.49732    FALSE
[c] = X2|X1           7                -2.19324     TRUE
[d] = Residuals                         3.55029    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 4`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 2.9761 
No. of observations: 21 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           11   0.59182       0.09293     TRUE
[b+c] = X2           11   0.66798       0.26218     TRUE
[a+b+c] = X1+X2      20   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           9                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           9                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 5`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 22.225 
No. of observations: 19 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           12   0.33961      -0.98118     TRUE
[b+c] = X2            5   0.32983       0.07207     TRUE
[a+b+c] = X1+X2      17   0.99042       0.82762     TRUE
Individual fractions                                    
[a] = X1|X2          12                 0.75555     TRUE
[b]                   0                -1.73673    FALSE
[c] = X2|X1           5                 1.80880     TRUE
[d] = Residuals                         0.17238    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 6`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 8.3746 
No. of observations: 11 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            8   0.78949      -0.05257     TRUE
[b+c] = X2            5   0.55108       0.10217     TRUE
[a+b+c] = X1+X2      10   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2           5                             TRUE
[b]                   0                            FALSE
[c] = X2|X1           2                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 7`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 39.557 
No. of observations: 34 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1           17   0.49694      -0.03756     TRUE
[b+c] = X2           16   0.45187      -0.06402     TRUE
[a+b+c] = X1+X2      33   1.00000                   TRUE
Individual fractions                                    
[a] = X1|X2          17                             TRUE
[b]                   0                            FALSE
[c] = X2|X1          16                             TRUE
[d] = Residuals                                    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

$`Month 8`

Partition of squared Bray distance in dbRDA 

Call: varpart(Y = x, X = ~., y, data = z)

Explanatory tables:
X1:  ~.
X2:  y 

No. of explanatory tables: 2 
Total variation (SS): 21.097 
No. of observations: 22 

Partition table:
                     Df R.squared Adj.R.squared Testable
[a+b] = X1            9   0.43984       0.01972     TRUE
[b+c] = X2           10   0.52669       0.09641     TRUE
[a+b+c] = X1+X2      19   0.93862       0.35546     TRUE
Individual fractions                                    
[a] = X1|X2           9                 0.25905     TRUE
[b]                   0                -0.23933    FALSE
[c] = X2|X1          10                 0.33574     TRUE
[d] = Residuals                         0.64454    FALSE
---
Use function ‘dbrda’ to test significance of fractions of interest

Warning messages:
1: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
2: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
3: collinearity detected: redundant variable(s)  between tables X1, X2
results are probably incorrect: remove redundant variable(s) and repeat the analysis 
Warning message:
In rm(abFrac, aFrac, abFrac0, pcnm_df, bcFrac, bcFrac0, step.space) :
  object 'abFrac0' not found
